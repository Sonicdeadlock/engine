\\bower.json
{
  "name": "engine",
  "description": "An Engine to manipulate things",
  "main": "server.js",
  "authors": [
    "Alex Thomas"
  ],
  "license": "MIT",
  "moduleType": [],
  "homepage": "",
  "ignore": [
    "**/.*",
    "node_modules",
    "bower_components",
    "test",
    "tests"
  ],
  "dependencies": {
    "bootstrap-css": "^3.3.6",
    "angular": "^1.5.3",
    "angular-animate": "^1.5.3",
    "angular-bootstrap": "^1.2.5",
    "angular-cookies": "^1.5.3",
    "angular-motion": "^0.4.3",
    "angular-resource": "^1.5.3",
    "angular-sanitize": "^1.5.3",
    "angular-scroll-glue": "^2.0.6",
    "angular-strap": "2.3.1",
    "angular-ui-router": "^0.2.18",
    "bootstrap-additions": "^0.3.1",
    "font-awesome": "^4.5.0",
    "jquery": "^2.2.2",
    "lodash": "^4.6.1",
    "socket.io-client": "^1.4.5",
    "angular-socket-io": "^0.7.0",
    "angular-ui-switch": "^0.1.1",
    "angular-timeago": "^0.2.8",
    "ngInfiniteScroll": "nginfinitescroll#^1.2.2",
    "markdown": "^0.5.0"
  }
}


\\character_replcements.json
[
  {"_id":{"$oid":"56f73acf701e00b0edc35a91"},"character":"a","replacements":["a","A","@","/-\\"]},
{"_id":{"$oid":"56f73c06701e00b0edc35a92"},"character":"b","replacements":["b","B","8","13","l3"]},
{"_id":{"$oid":"56f73c3c701e00b0edc35a93"},"character":"c","replacements":["c","C","Â¢","("]},
{"_id":{"$oid":"56f73c99701e00b0edc35a94"},"character":"d","replacements":["d","D","[)","|)"]},
{"_id":{"$oid":"56f73ccd701e00b0edc35a95"},"character":"e","replacements":["e","E","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3"]},
{"_id":{"$oid":"56f73d3b701e00b0edc35a96"},"character":"g","replacements":["g","G","C-","gee"]},
{"_id":{"$oid":"56f74976701e00b0edc35a97"},"character":"h","replacements":["h","H","#","[-]","(-)","{-}","|-|","\\-\\","/-/"]},
{"_id":{"$oid":"56f749d6701e00b0edc35a98"},"character":"i","replacements":["i","I","!","1"]},
{"_id":{"$oid":"56f74a0e701e00b0edc35a99"},"character":"j","replacements":["j","J",",|"]},
{"_id":{"$oid":"56f74a4d701e00b0edc35a9a"},"character":"k","replacements":["k","K","|\u003c","]{"]},
{"_id":{"$oid":"56f74b0b701e00b0edc35a9b"},"character":"l","replacements":["l","L"]},
{"_id":{"$oid":"56f74b61701e00b0edc35a9c"},"character":"m","replacements":["(\\/)","[V]","m","M"]},
{"_id":{"$oid":"56f74b9d701e00b0edc35a9d"},"character":"n","replacements":["n","N","(\\)"]},
{"_id":{"$oid":"56f74bd9701e00b0edc35a9e"},"character":"o","replacements":["o","O","0","oh","()"]},
{"_id":{"$oid":"56f74c27701e00b0edc35a9f"},"character":"p","replacements":["p","P","[]D","|D"]},
{"_id":{"$oid":"56f74c53701e00b0edc35aa0"},"character":"q","replacements":["q","Q","(,)"]},
{"_id":{"$oid":"56f74c91701e00b0edc35aa1"},"character":"r","replacements":["r","R","12","|2"]},
{"_id":{"$oid":"56f74cbf701e00b0edc35aa2"},"character":"s","replacements":["s","S","5","$"]}
  ]


\\chat.js
/**
 * Created by alexthomas on 12/11/15.
 */

 var _ = require('lodash');
 var db = require('./db');
 var chatModel = require('./models/chat');
 var chat = db.model('chat');
 var roomModel = require('./models/room');
 var room = db.model('room');
 var bannedWordModel = require('./models/banned_word');
 var banned_word = db.model('banned_word');
 var userModel = require('./models/user');
 var User = db.model('user');
 var textMod = require('./classes/textMod');
 var commands = require('./classes/commands');
var config = require('./config');


 var users = [];
 var serverUser = {_id:undefined,username:'Server',group:{name:undefined}};
 var hooks = {};
 module.exports = {connect:connect,disconnect:disconnect,on:addHookListener,removeHooks:removeHooks};
 function connect(socket){
    var user = socket.client.request.user;
    var chatRoom = undefined;
    var userCollectionObj = {user:user,socket:socket};
    users.push(userCollectionObj);

    socket.on('chatClientToServer',function(message){
        if(!chatRoom.bans || (chatRoom.bans && !_.find(chatRoom.bans,function(id){return id.id == user._id.id}))){
            if(message.text && chatRoom){
                var impersonate = undefined;
                if(message.text.indexOf('!impersonate')==0 && user.hasPermission('impersonate')){
                    var split = message.text.split(' ');
                    impersonate = {name:split[1]};
                    message.text = _.slice(split,2).join(' ');
                }
                var prom = new Promise(function(resolve,reject){resolve(message.text)});
                prom = prom.then(preChatHook.bind(this,user,chatRoom));
                if(message.mods)
                for(var i=0;i<message.mods.length;i++){
                    var mod = message.mods[i];
                    switch (mod.name){
                        case 'l337':
                        prom = prom.then(textMod.leet.bind(null,mod.attributes.chance));
                        break;
                        case 'removeCharacter':
                        prom = prom.then(textMod.remove.bind(null,mod.attributes.remove));
                        break;
                    }
                }
                prom.then(function(text){
                    (new chatObj(user,chatRoom,text)).then(function(chat){
                        if(impersonate)
                            chat.username = impersonate.name;

                       chatToRoom(chatRoom,chat);
                        if(commands.isCommand(text))
                            commands.execute(text,function(serverText){
                                _.forEach(getUsersForCommunication(chatRoom),function(u){
                                    (new chatObj(serverUser,chatRoom,serverText)).then(function(serverChat){
                                        u.socket.emit('chatServerToClient',serverChat);
                                    })
                                })
                            },user);
                        chatHook(user,chatRoom,chat.text);
                    });
                })
            }
        }else{
            socket.emit('chatError',{error:'You are not allowed in this room!'});
        }

    });

    socket.on('chatEnterRoom',function(message){
        var roomData = message.room;
        if(!roomData){
            socket.emit('chatError',{error:'Room no longer exists!'});
            return;
        }
        room.findOne({_id:roomData._id}).then(function(roomDoc){
            if(!roomDoc){
                socket.emit('chatError',{error:'Room no longer exists!'});
                return;
            }
            var allowedInRoom = true;
            if(roomDoc.bans){
                if(_.find(roomDoc.bans,function(id){return id.id == user._id.id})){
                    allowedInRoom = false;
                    socket.emit('chatError',{error:'You are banned from this room!'});
                }
            }
            if(roomDoc.password){
                if(!(message.password && message.password == roomDoc.password)){
                    allowedInRoom = false;
                    socket.emit('chatError',{error:"Invalid Password"});
                }
            }
            if(allowedInRoom){ //TODO: check permissions to enter the room
                chatRoom = roomDoc;
                userCollectionObj.room = roomData;
                socket.emit('chatEnterRoom',{room:roomData});
                roomEnterHook(user,chatRoom);
                _.forEach(getUsersForCommunication(chatRoom),function(u){
                    u.socket.emit('chatRoomEntrance',user.username);
                })
            }
        });

    });
    socket.on('chatLeaveRoom',function(){
        if(chatRoom){
            _.forEach(getUsersForCommunication(chatRoom),function(u){
                u.socket.emit('chatRoomExit',user.username);
            });
            var hookWait = roomExitHook.bind(this,user,chatRoom);
            chatRoom = undefined;
            userCollectionObj.room = undefined;
            hookWait();
        }

    });
    socket.on('chatBanUser',function(message){
     var user_id = message.user_id;
     if(user.hasPermission('Chat Admin') && chatRoom){
        User.update({_id:user_id},{$inc: {'strikes.bans':1}}).then();
        chatRoom.bans.push(user_id);
        chatRoom.save();
    }
});
}

function disconnect(socket){
    users = _.reject(users,{socket:socket});
}

function chatObj(sendUser,chatRoom,text){
    this.text = text;
    this.time = new Date();
    this.user = sendUser._id;
    this.room = chatRoom._id;
    var c = new chat(this);
    c.save();
    var formatedText = text;//TODO: format,sterilize text
    var self = this;
    return banned_word.find({}).cache().exec().then(function(badWords){
        badWords.forEach(function(badWord){
            var count = formatedText.match(new RegExp('('+badWord.regex.trim()+')+','g'));
            count = count===null?0:count.length;
            if(count>0){
                formatedText = formatedText.replace(new RegExp('('+badWord.regex.trim()+')+','g'),'<span class="text-danger">[CENSORED]</span>');
                if(sendUser)
                    sendUser.update({$inc: {'strikes.chat':count}}).then();
            }
        });
        var reg_exUrl = new RegExp(/(((http|https|ftp|ftps)\:\/\/|www\.)[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?)|(\d{1,3}\.){3}\d{1,3}(\/\S*)?/g);
        var matches = formatedText.match(reg_exUrl) || [];
        for (var i = matches.length - 1; i >= 0; i--) {
            var match = matches[i];
            formatedText = formatedText.replace(match, "<a target='_blank' href='" + match + "'>" + match + "</a>");
        }
        self.text = formatedText;
        self.username = sendUser.username;
        self.rank = sendUser.group.name;
        self.formating = sendUser.chat;
        return self;
    });


}

function preChatHook(user,room,text){
    var promise;
    var listeners = hooks["preChat"] && hooks["preChat"][room._id] || [];
    if(_.isEmpty(listeners)) return new Promise(function(resolve,reject){resolve(text)});
    function chatToRoomCallback(text){
        var chat = _.isObject(text)?text:{text:text,time: _.now()};
        chatToRoom(room,chat);
    }
    function chatToUserCallback(text){
        var chat = _.isObject(text)?text:{text:text,time: _.now()};
        chatToUser( _.find(users,{user:user}),chat);
    }
    promise = Promise.all(_.map(listeners,function(listener){
        try{
            var result = listener(user,chatToRoomCallback,chatToUserCallback,text);
            if(result===undefined)
                return true;
            if(_.isFunction(result.then))
                return result.then(function(shouldContinue){return shouldContinue},function(){return true});
            else if(_.isBoolean(result))
                return result;
            else
                return true
        }
        catch(ex){
            if(ex){
                console.error(ex);
            }
            return true;
        }
    }));
    promise = setHookPromiseTimeout(promise);
    return new Promise(function(resolve,reject){
        promise.then(function(results){
            if(!results || !_.isArray(results) ||_.isEmpty(results) || results.indexOf(false)===-1){
                resolve(text);
            }
            else{
                reject()
            }
        });
    });
}

function setHookPromiseTimeout(promises){
    return Promise.race([promises,new Promise(function(resolve){ setTimeout(resolve,config.chat.hookTimeout)})])
}

function genericHookHandle(listeners,user,room,text){

    function chatToRoomCallback(text){
        var chat = _.isObject(text)?text:{text:text,time: _.now()};
        chatToRoom(room,chat);
    }
    function chatToUserCallback(text){
        var chat = _.isObject(text)?text:{text:text,time: _.now()};
        chatToUser( _.find(users,{user:user}),chat);
    }
    return Promise.all(_.map(listeners,function(listener){
        return listener(user,chatToRoomCallback,chatToUserCallback,text);
    }));
}

function chatHook(user,room,text){
    var listeners = hooks["chat"] && hooks["chat"][room._id] || [];
    genericHookHandle(listeners,user,room,text);
}

function roomEnterHook(user,room){
    var listeners = hooks["enterRoom"] && hooks["enterRoom"][room._id] || [];
    genericHookHandle(listeners,user,room);
}

function roomExitHook(user,room){
    var listeners = hooks["exitRoom"] && hooks["exitRoom"][room._id] || [];
    genericHookHandle(listeners,user,room);
}

function chatToRoom(room,chat){
    _.forEach(getUsersForCommunication(room),function(u){
        chatToUser(u,chat);
    });
}

function chatToUser(user,chat){
    user.socket.emit('chatServerToClient',chat);
}

function getUsersForCommunication(room){
    //TODO: determine only users who need to see the chat
    return _.filter(users,function(o){
        return o.room && o.room._id == room._id;
    });
}

function addHookListener(type,roomId,listener){
    if(!hooks[type]){
        hooks[type] = {};
    }
    if(!hooks[type][roomId]){
        hooks[type][roomId] = [];
    }
    hooks[type][roomId].push(listener);
}

function removeHooks(){
    hooks = {};
}

\\db.js
/**
 * Created by Sonicdeadlock on 7/21/2015.
 */
var config = require('./config');
var mongoose = require('mongoose');
require('mongoose-cache').install(mongoose, {max:500,maxAge:1000*60*2,debug:true});

module.exports = mongoose.connect('mongodb://'+config.db.host +'/'+ config.db.name)
    .connection
    .on('error', function(err){
        console.log(err);
    })
    .once('open', function(callback){
        console.log('mongodb:', config.db.host + config.db.name);

        if(callback){
            callback();
        }
    });

\\defaultGroups.json
[
  {
    "name":"User",
    "permissions":[],
    "default":true,
    "userAccess":"username"
  },
  {
    "name":"Super Admin",
    "permissions":[
      "super",
      "sudo",
      "all",
      "god",
      "Group Admin",
      "User Admin",
      "Admin",
      "Super Admin"
    ],
    "default":false,
    "userAccess":"",
    "_id":ObjectId("572d7a3d6f775fb187f549fe")
  }
]

\\defaultTopics.json
[
  {
    "_id": {
      "$oid": "572cba3e7c4abfb72a9986b5"
    },
    "name": "General",
    "description": "General Discussion",
    "creator": {
      "$oid": "56f862265bc59dd84978ec3e"
    },
    "postRequirements": [],
    "__v": 0
  },
  {
    "_id": {
      "$oid": "572cba587c4abfb72a9986b6"
    },
    "name": "Chat",
    "description": "Chat Discussion",
    "creator": {
      "$oid": "56f862265bc59dd84978ec3e"
    },
    "postRequirements": [],
    "__v": 0
  },
  {
    "_id": {
      "$oid": "572cba637c4abfb72a9986b7"
    },
    "name": "Game",
    "description": "Game Discussion",
    "creator": {
      "$oid": "56f862265bc59dd84978ec3e"
    },
    "postRequirements": [],
    "__v": 0
  },
  {
    "_id": {
      "$oid": "572cba887c4abfb72a9986b8"
    },
    "name": "Bugs/Requests",
    "description": "The place to discuss bugs and feature requests",
    "creator": {
      "$oid": "56f862265bc59dd84978ec3e"
    },
    "postRequirements": [],
    "__v": 0
  }
]

\\defaultUsers.json
[
  {
    "_id" : ObjectId("572d7b7fba3fac7f6bd7cd5b"),
    "group" : ObjectId("572d7a3d6f775fb187f549fe"),
    "firstName" : "root",
    "lastName" : "root",
    "username" : "root",
    "email" : "root@root.com",
    "password" : "fXUJtITTOq5+NaCngPQaRat5z1/5vFt7kXwO5blDC75H5G0FuLS5PzHaD8UMJJLVISXRfLUlHWZfeci7Bql1KEagXjVOEZEqPmyC0mtvkkoCEm+m4YomlCYuCAFARfumh/q65GJTlgWHfxY576m/VHNAODljtuZZoZSsZH5xOVdBreKcN3nYKofK6O3IxKnIFpcAoWodtQToxcU68BB8ssIQ+YSzSEhlB19jz/y3RYw5UQBeEaUlg156yx0CXwZeZWv1mmmRDUHPb48PhgPqsZA7YWPgWBBr70JipFfGCTChV/yymBnq6pTzLfgQSoA+jM8W6MZedTAfior+vFYJQg==",
    "joinDate" : ISODate("2016-05-07T05:22:07.723Z"),
    "salt" : "1T994nYaUJ+q7ZPolCH6xRhUBQbIUJgyM3As/afBBsBDnGzoJaEfcLEMHKN8Km0aahnuQFyHYZrVizVC475hn3LDnBe22ES5C0a0ag1MTZDZOvkPPy3RvP1I0LwAwlzvH+TweAzYTphJGvVW+cIJyzKl0aWAYNwgxIo8UnMphZ8=",
    "strikes" : {
      "bans" : 0,
      "chat" : 0
    },
    "__v" : 0
  }
]

\\Gruntfile.js
/**
 * Created by alexthomas on 4/8/16.
 */
var config = require('./config.js');
/*global module:false*/

module.exports = function(grunt) {
    // Project configuration.
    grunt.initConfig({
        // Task configuration.
        jshint: {
            options: {
                curly: true,
                eqeqeq: true,
                immed: true,
                latedef: true,
                newcap: true,
                noarg: true,
                sub: true,
                boss: true,
                eqnull: true,
                esnext:true,
                globals: {
                    jQuery: true,
                    it:true,
                    before:true,
                    require:true,
                    describe:true
                }
            },
            gruntfile: {
                src: 'Gruntfile.js'
            },
            lib_test: {
                src: ['lib/**/*.js', 'test/**/*.js']
            }
        },
        watch: {
            gruntfile: {
                files: '<%= jshint.gruntfile.src %>',
                tasks: ['jshint:gruntfile']
            },
            lib_test: {
                files: '<%= jshint.lib_test.src %>',
                tasks: ['jshint:lib_test', 'nodeunit']
            }
        },
        mongoimport:{
            options:{
                db:config.db.name,
                host:config.db.host,
                collections:[
                    {
                        name:"permissiongroups",
                        type:"json",
                        file:"defaultGroups.json",
                        jsonArray:true,
                        drop:true
                    },
                    {
                        name:"users",
                        type:"json",
                        file:"defaultUsers.json",
                        jsonArray:true,
                        drop:true
                    },
                    {
                        name:"character_replacements",
                        type:'json',
                        file:"character_replcements.json",
                        jsonArray:true,
                        drop:true
                    },
                    {
                        name:"forum_topics",
                        type:'json',
                        file:"defaultTopics.json",
                        jsonArray:true,
                        drop:true
                    }
                ]
            }
        },
        simplemocha: {
            options: {
                globals: ['expect'],
                timeout: 3000,
                ignoreLeaks: true,
                ui: 'bdd',
                reporter: 'spec',
                harmony:true
            },
            all: { src: ['test/*.js'] }
        }
    });

    // These plugins provide necessary tasks.
    grunt.loadNpmTasks('grunt-contrib-jshint');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-simple-mocha');
    grunt.loadNpmTasks('grunt-mongoimport');

    // Default task.
    grunt.registerTask('default', ['jshint', 'nodeunit']);

    grunt.registerTask('setupDB',['mongoimport']);

    grunt.registerTask('mocha-test', ['jshint','mongoimport', 'simplemocha']);


};

\\package.json
{
  "name": "engine",
  "version": "1.0.0",
  "description": "An Engine to manipulate things",
  "main": "server.js",
  "scripts": {
    "install": "bower install",
    "test":"db=test node --harmony ./node_modules/.bin/grunt mocha-test"
  },
  "repository": {
    "type": "git",
    "url": "https://bitbucket.org/Sonicdeadlock/engine"
  },
  "author": "Alex Thomas",
  "license": "MIT",
  "dependencies": {
    "body-parser": "^1.15.0",
    "bower": "^1.7.7",
    "connect-mongo": "0.8.2",
    "cookie-parser": "^1.4.1",
    "crypto": "0.0.3",
    "express": "^4.13.4",
    "express-session": "^1.13.0",
    "lodash": "^4.6.1",
    "mongoose": "^4.4.10",
    "mongoose-cache": "^0.1.4",
    "passport": "^0.3.2",
    "passport-local": "^1.0.0",
    "passport.socketio": "^3.6.1",
    "socket.io": "^1.4.5",
    "uid": "0.0.2"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-jshint": "^0.11.2",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-mongoimport": "^0.1.6",
    "grunt-simple-mocha": "^0.4.0",
    "mocha": "^2.2.5",
    "should": "^7.0.2",
    "supertest": "^1.0.1",
    "supertest-session": "^1.0.0"
  }
}


\\README.md
# Engine #

### Dependencies ###
- Nodejs (at least 0.12.x)
- bower `npm install bower -g`
- grunt-cli `npm install grunt-cli -g`
- mongodb

### Getting Started ###
1. Clone the repository
2. In the repository directory run `npm install` (will automatically run `bower install`)
3. Run `grunt setupDB`

### Tips ###
- When adding a dependency add `--save` to add it to the `package.json`
    - If it's a development only dependency use `--save-dev`
- `nodemon` is a package that you can use to run your server and will watch the files and restart the server when there are changes so you don't have to
    - install with `npm install nodemon -g`
    - use anywhere you would use node i.e. `node server.js` -> `nodemon server.js`

\\roomSocketHandle.js
/**
 * Created by Sonicdeadlock on 4/1/2016.
 */
var _ = require('lodash');
var db = require('./db');
var roomModel = require('./models/chat');
var room = db.model('room');
var io = require('socket.io');

module.exports = {connect:connect,disconnect:disconnect,updateRooms:updateRooms};

function emitRooms(emitter){
    room.find({}).sort('name').then(function(results){
        results = _.map(results,function(obj){
            obj = obj.toObject();
            obj = _.omit(obj,['bans']);
            if(obj.password){
                obj = _.omit(obj,['password']);
                obj.hasPassword = true;
                return obj;
            }
            return obj;

        });
        emitter.emit('chatRooms',results);
    });
}

function updateRooms(){
    emitRooms(io);
}

function connect(socket){
    emitRooms(socket);

    var user = socket.client.request.user;
    socket.on('deleteRoom',function(roomId){
        room.findOne({_id:roomId}).then(function(result){
            if(result){
                if(user.hasPermission('Room Admin') && (result.deletable || user.hasPermission('god'))){
                    room.findOneAndRemove({_id:roomId}).then(function(){
                            emitRooms(io);

                    })

                }
            }
        })
    });
    socket.on('getRooms',function(){
        emitRooms(socket);
    });
}

function disconnect(socket){

}

\\server.js
/**
 * Created by alexthomas on 3/26/16.
 */

var config = require('./config');
var _ = require('lodash');
var express = require('express');
var bodyParser = require('body-parser');
var app = express();
var session = require('express-session');
var SessionStore = require('connect-mongo')(session);
var passport = require('passport');
var server = require('http').createServer(app);
var io = require('socket.io')(server);
var db = require('./db');
var chat = require('./chat');
require('./bots/bots')();//load bots
var roomSocketHandle = require('./roomSocketHandle');
var passportSocketIo = require("passport.socketio");
//Web Routes
var web = require('./routes/index');
var api = require('./routes/api');
var auth = require('./routes/auth');


//Configure Express
app.use('/bower_components', express.static(__dirname + '/bower_components'));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(session({
    store:new SessionStore({mongooseConnection:db}),
    secret:config.session.secret,
    cookie:config.session.cookie,
    resave:false,
    saveUninitialized:false,
    unset:"destroy"
}));
app.use(passport.initialize());
app.use(passport.session());

//Register routes
app.use('/', web);
app.use('/api', api);
app.use('/auth',auth);

//On Request
app.use(function(req, res, next) {
    //Enable CORS
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");

    next();
});

//On Error
app.use(function(err, req, res, next) {
    console.error(err.stack);
    res.status(500).send("There was an error processing your request");
});


//Start app
server.listen(config.web.port);

io.use(passportSocketIo.authorize({
    cookieParser: require('cookie-parser'),
    key:          'connect.sid',       //make sure is the same as in your session settings in app.js
    secret:       config.session.secret,      //make sure is the same as in your session settings in app.js
    store:        new SessionStore({mongooseConnection:db})
}));

io.on("connection",function(socket){
    var socketHandlers = [chat,roomSocketHandle];
    _.forEach(socketHandlers,function(handler){
        handler.connect(socket);
    });
    socket.on('disconnect',function(){
        _.forEach(socketHandlers,function(handler){
            handler.disconnect(socket);
        });
    })
});

//Debug
console.log('serving from:', __dirname);
console.log('listening on:', config.web.port);

module.exports = app;



\bots\basicBot.js
/**
 * Created by alexthomas on 4/11/16.
 */
var _ = require('lodash');
var db = require('../db');
var playerSchema = require('../models/player');
var playerModel = db.model('player');
var Room = require('../models/room');
var chat = require('../chat');


var rooms = [];
var battleStatuses={1:"There is no battle in progress",2:"There is a battle pending, player one is ready",3:"A battle is in progress;"};

function userEnterRoom(user,room){//required to be exposed
    var matchedRoom = _.find(rooms,{roomId:room._id});
    if(!matchedRoom){
        var newRoom = {};
        newRoom.roomId = room._id;
        newRoom.players =[];
        matchedRoom = newRoom;
        rooms.push(newRoom);
    }
    playerModel.findOne({user:user._id}).populate('user','username').exec().then(function(result){
       if(result){
           matchedRoom.players.push(result);
       } else{
           var player = new playerModel({
                user:user._id,
               stats:{
                   level:1,
                   strength:_.random(1, 10),
                   intelligence:_.random(1, 10),
                   constitution:_.random(1, 10),
                   wisdom:_.random(1, 10),
                   dexterity:_.random(1, 10),
                   agility:_.random(1, 10),
                   BEN:_.random(1, 3)
               }
           });
           player.save();
           matchedRoom.players.push(player);
       }
    });



}

function userExitRoom(user,room){//required to be exposed
    var matchRoom = _.find(rooms,{roomId:room._id});
    //check if the user is in a battle
    matchRoom.players = _.reject(matchRoom.players,{_id:user._id});
}

function chatInduction(user,room,chat,roomChatCallback,userChatCallback){
    room = _.find(rooms,{roomId:room._id});
    var player = _.find(room.players,['user._id',user._id]);
    if(_.startsWith(chat,'!UserStats')){
        //return user stats
        var stats = _.clone(player._doc.stats);
        stats =_.assign(stats,{
            minAttack:player.stats.minAttack,
            maxAttack:player.stats.maxAttack,
            mAtk:player.stats.mAtk,
            critical:player.stats.critical,
            HP:player.stats.HP,
            SP:player.stats.SP,
            HDef:player.stats.HDef,
            SDef:player.stats.SDef,
            hit:player.stats.hit,
            flee:player.stats.flee
        });
        var statsString = '';
         _.forOwn(stats,function(value,key){
            statsString += key+":"+value+'<br>';
        });
        roomChatCallback(statsString);
    }else if(_.startsWith(chat,'!GameStatus')){
        roomChatCallback(getBattleStatus(room));
    }
    else{ //check for a combat related command
        if(_.startsWith(chat,'!Duel')){
            if(getBattleStatusId(room)!=1){
                userChatCallback('A battle can not be initialized at this time.');
            }else{
                room.battle = {};
                var parts = chat.split(' ');
                if(parts.length==1){
                    roomChatCallback('Batlle initialized, waiting for opponent.');
                    room.battle.playerOne = _.find(room.players,['user._id',user._id]);
                }else{
                    var otherPlayer = _.find(room.players,{user:{username:parts[1]}});
                    if(!otherPlayer){
                        userChatCallback('Could not find a user with that Username in this room.');
                    }else{
                        room.battle.challangedPlayer = otherPlayer;
                        room.battle.playerOne = player;
                        roomChatCallback(user.username+' challanged ' + otherPlayer.user.username+' to battle');
                    }
                }
            }
        }
        if(_.startsWith(chat,'!Accept')){
            if(room.battle.challangedPlayer){
                if(room.battle.challangedPlayer==player){
                    room.battle.playerTwo =player;
                    roomChatCallback('Battle Start')
                }else {
                    userChatCallback('You are not the player that was challenged...');
                }
            }else{
                room.battle.playerTwo =player;
                roomChatCallback('Battle Start')
            }
        }
        if(_.startsWith(chat,'!Decline')){
            if(getBattleStatusId(room)==1){
                userChatCallback('There is no battle to decline');
            }else{
                if(room.battle.challangedPlayer==player){
                    room.battle = {};
                    roomChatCallback('Battle Declined');
                }else {
                    userChatCallback('You are not the player that was challenged...');
                }
            }
        }
        if(_.startsWith(chat,'!flee' || _.startsWith(chat,'!die'))){
            roomChatCallback('The battle is over');
            room.battle = undefined;
        }

    }
}

function getBattleStatusId(room){
    if(!room.battle || room.battle==={}){
        return 1;
    }else if(room.battle.playerOne && !room.battle.playerTwo){
        return 2;
    }else{
        return 3;
    }
}

function getBattleStatus(room){
    var statusId = getBattleStatusId(room);
    var status = battleStatuses[statusId];
    if(statusId==3){
        status+=room.battle.playerOne.user.username +' & '+room.battle.playerTwo.user.username +' are playing';
    }
    return status;

}


function init(){
    Room.find({bots:{"$elemMatch":{name:"basic"}}}).then(function(roomResults){
        roomResults.forEach(function(room){
            chat.on('enterRoom',room._id,function(user,chatToRoom,chatToUser){
               userEnterRoom(user,room);
            });
            chat.on('exitRoom',room._id,function(user,chatToRoom){
               userExitRoom(user,room);
            });
            chat.on("chat",room._id,function(user,chatToRoom,chatToUser,text){
                chatInduction(user,room,text,chatToRoom,chatToUser);
            });
        });
    });
}


module.exports.init = init;

\bots\bots.js
/**
 * Created by Sonicdeadlock on 5/28/2016.
 */
var chat = require('../chat');
var bots = ['test','hangmanBot','basicBot','gambleBot'];


function initBots(){
    chat.removeHooks();
    bots.forEach(function(bot){
        require('./'+bot).init();
    });
}

module.exports = initBots;

\bots\gambleBot.js
/**
 * Created by alexthomas on 5/10/16.
 */
var _ = require('lodash');
var db = require('../db');
var playerModel = require('../models/player');
var Room = require('../models/room');
var chat = require('../chat');

var rooms = [];
var modes = {
    dice:require('./gamblingModes/dice'),
    slots:require('./gamblingModes/slots')
};
function userEnterRoom(user,room){//required to be exposed
    var matchedRoom = _.find(rooms,{roomId:room._id});
    if(!matchedRoom){
        var newRoom = {};
        newRoom.roomId = room._id;
        newRoom.players =[];
        matchedRoom = newRoom;
        rooms.push(newRoom);
    }
    playerModel.findOne({user:user._id}).populate('user','username').exec().then(function(result){
        if(result){
            matchedRoom.players.push(result);
        } else{
            var player = new playerModel({
                user:user._id,
                stats:{
                    level:1,
                    strength:_.random(1, 10),
                    intelligence:_.random(1, 10),
                    constitution:_.random(1, 10),
                    wisdom:_.random(1, 10),
                    dexterity:_.random(1, 10),
                    agility:_.random(1, 10),
                    BEN:_.random(1, 3)
                }
            });
            player.save();
            matchedRoom.players.push(player);
        }
    });



}

function userExitRoom(user,room){//required to be exposed
    var matchRoom = _.find(rooms,{roomId:room._id});
    matchRoom.players = _.reject(matchRoom.players,{_id:user._id});
}

function chatInduction(user,room,chat,roomChatCallback,userChatCallback) {
    room = _.find(rooms, {roomId: room._id});
    var player = _.find(room.players, ['user._id', user._id]);

    if (_.startsWith(chat, '!commands')) {
        var commands = _.union(['!money', '!setMode', '!commands', '!bet'], _.keys(modes));
        roomChatCallback('Gambling bot commands:<br>' + commands.join('<br>'));
    }
    else {
        if (!room.mode) {
            userChatCallback('Mode not set, please speak to a room admin');
        } else {
            var mode = modes[room.mode];
            if(mode.chat)
                mode.chat(user, player, room, chat, roomChatCallback, userChatCallback);
        }
    }
}

function preChat(user,room,chatToRoom,chatToUser,text){
    room = _.find(rooms, {roomId: room._id});
    var player = _.find(room.players, ['user._id', user._id]);
    if (_.startsWith(text, '!money')) {
        chatToUser("$" + player.money);
        return false;
    }
    else if (_.startsWith(text, '!setMode')) {
        if (user.hasPermission('Room Admin')) {
            var mode = text.substr('!setMode'.length + 1);
            if (_.keys(modes).indexOf(mode) === -1) {
                chatToUser('Invalid mode')
            } else {
                room.mode = mode;
                chatToRoom('mode set to: ' + mode);
            }
        }
        else {
            chatToUser("You don't have permission to do this!");
        }
        return false;
    }
    if(room && room.mode){
        var mode = modes[room.mode];
        if(mode.preChat)
           return mode.preChat(user, player, room, chat, chatToRoom, chatToUser);
    }

}



function init() {
    Room.find({bots: {"$elemMatch": {name: "gamble"}}}).then(function (roomResults) {
        roomResults.forEach(function (room) {
            chat.on('enterRoom', room._id, function (user, chatToRoom, chatToUser) {
                userEnterRoom(user, room);
            });
            chat.on('exitRoom', room._id, function (user, chatToRoom) {
                userExitRoom(user, room);
            });
            chat.on("chat", room._id, function (user, chatToRoom, chatToUser, text) {
                chatInduction(user, room, text, chatToRoom, chatToUser);
            });

            chat.on('preChat', room._id,function (user, chatToRoom, chatToUser, text) {
                return preChat(user,room,chatToRoom,chatToUser,text);
            });
        });
    });
    Room.find({}).then(function(roomResults){
        var players = [];
        roomResults.forEach(function (room) {
            chat.on('enterRoom', room._id, function (user, chatToRoom, chatToUser) {
                playerModel.findOne({user:user._id},'tokens user').then(function(result){
                    if(!result){
                        var player = new playerModel({
                            user:user._id,
                            stats:{
                                level:1,
                                strength:_.random(1, 10),
                                intelligence:_.random(1, 10),
                                constitution:_.random(1, 10),
                                wisdom:_.random(1, 10),
                                dexterity:_.random(1, 10),
                                agility:_.random(1, 10),
                                BEN:_.random(1, 3)
                            }
                        });
                        player.save();
                        result = player;
                    }
                    if(!_.find(players,{_id:result._id})){
                        players.push(result);
                    }
                });
            });
            chat.on('exitRoom', room._id, function (user, chatToRoom) {
                players = _.reject({user:user._id});
            });
            chat.on("preChat", room._id, function (user, chatToRoom, chatToUser, text) {
                if(text==="!tokens"){
                    playerModel.findOne({user:user._id},'tokens user').then(function(result){
                        if(result)
                        chatToUser(result.tokens);
                    });
                    return false;
                }
            });


        });
        setInterval(function(){
            var ids = _.map(players,'_id');
            playerModel.update({_id:{$in:ids}},{$inc:{tokens:1}},{multi:true}).then();
        },1000*60 *10);//every 10 minutes
    });
}


module.exports.init = init;


\bots\hangmanBot.js
/**
 * Created by alexthomas on 4/14/16.
 */
var _ = require('lodash');
var uid = require('uid');
var db = require('../db');
var token = require('../models/token');
var content = require('../models/content');
var Room = require('../models/room');
var chat = require('../chat');

var rooms = [];
var hangmanParts = [
    'Your hangman now has a head',
    'Your hangman now has a body',
    'Your hangman now has a right arm',
    'Your hangman now has a left arm',
    'Your hangman now has a right hand',
    'Your hangman now has a left hand',
    'Your hangman now has a right leg',
    'Your hangman now has a left leg',
    'Your hangman now has a right foot',
    'Your hangman now has a left foot'
];

function setWord(room,word,cb){
    var matchedRoom = _.find(rooms,{roomId:room._id}) ;

    if(!matchedRoom){
        matchedRoom = {
            roomId:room._id
        };
        rooms.push(matchedRoom);
        if(cb)
            cb('New hangman word set!');
    }else{
        if(cb)
            cb('New hangman word set!');
        else
            matchedRoom.mostRecentRoomCallback('New hangman word set!');
    }
    matchedRoom.strikes = 0;
    matchedRoom.word = word;
    matchedRoom.guessedLetters = [];
}

function chatInduction(user,room,chat,roomChatCallback,userChatCallback){
    var matchedRoom = _.find(rooms,{roomId:room._id});
    if(matchedRoom){
        matchedRoom.mostRecentRoomCallback = roomChatCallback;
    }
    if(_.startsWith(chat,'!setWord')){
        if(user.hasPermission('hangman')){
            var tkn = {
                token:uid(36),
                type:'hangman',
                tokenData:{
                    userId:user._id,
                    room:{_id:room._id}
                }
            };
            (new token(tkn)).save().then(function(){
               userChatCallback('<a href="/#/hangmanSetWord?token='+tkn.token+'" target="_blank">Click Here to set the word</a>')
            });
        }
        else{
            userChatCallback("You don't have permission to set the hangman word.");
        }


    }
    else if(_.startsWith(chat,'!random')){
        content.count({type:'hangmanWord'}).exec().then(function(count){
            content.findOne({type:'hangmanWord'}).skip(_.random(count-1)).then(function(result){
                setWord(room,result.content.trim(''),roomChatCallback);
            });
        });

    }
    else if(_.startsWith(chat,'!commands')){
        roomChatCallback("Hangman Commands are:" +
            "<br>!setWord" +
            "<br>!random" +
            "<br>!guess {character}" +
            "<br>!commands")
    }
    else{
        if(_.startsWith(chat,'!guess ')){
            if(!matchedRoom||!matchedRoom.word){
                userChatCallback('There is no word set!');
            }
            else{
                var character = chat.substr('!guess '.length);

                if(character.length>1){
                    userChatCallback('Please only guess one character');
                }
                else if(character.length<1){
                    userChatCallback('Please guess one character');
                }
                else{
                    guessLetter(matchedRoom,character,roomChatCallback);
                }
            }

        }
    }

}

function guessLetter(room,letter,roomChatCallback){
    if(room.guessedLetters.indexOf(letter)!=-1){
        roomChatCallback('Please guess a letter that hasn\'t been guessed yet.')
    }
    else{
        room.guessedLetters.push(_.lowerCase(letter));
        var preparedWord = prepareWord(room.guessedLetters,room.word);
        var guessedLetters = '[ '+room.guessedLetters.join(', ')+']';
        if(room.word.indexOf(letter)!=-1){
            var finishedWord = _.replace(preparedWord,'&nbsp&nbsp',' ') == room.word;
            var chat = preparedWord;
            chat += '<br>';
            chat += finishedWord?'You finished the word!':'Guessed Letters:'+guessedLetters;
            roomChatCallback(chat);
        }
        else{
            room.strikes++;
            if(room.strikes<hangmanParts.length){
                var chat = preparedWord;
                chat += '<br>';
                chat += 'Guessed Letters: '+guessedLetters;
                chat += '<br>';
                chat += hangmanParts[room.strikes];
                roomChatCallback(chat);
            }
            else{
                roomChatCallback('Game Over');
                room.word = undefined;
            }
        }
    }
}

function prepareWord(guessedLetters,word){
    return _.map(word,function(char){
        if(char == ' ')
            return '&nbsp&nbsp';
        char = _.lowerCase(char);

       if(guessedLetters.indexOf(char)==-1){
           return ' _ ';
       } else{
           return char;
       }
    }).join('');
}

function init(){
    Room.find({bots:{"$elemMatch":{name:"hangman"}}}).then(function(roomResults){
        roomResults.forEach(function(room){
            chat.on('enterRoom',room._id,function(user,chatToRoom,chatToUser){
                var matchedRoom = _.find(rooms,{roomId:room._id}) ;
                if(!matchedRoom)
                    content.count({type:'hangmanWord'}).exec().then(function(count){
                        content.findOne({type:'hangmanWord'}).skip(_.random(count-1)).then(function(result){
                            setWord(room,result.content.trim(''));
                        });
                    });
            });
            chat.on("chat",room._id,function(user,chatToRoom,chatToUser,text){
               chatInduction(user,room,text,chatToRoom,chatToUser);
            });
        });
    });
}


module.exports.init = init;
module.exports.setWord = setWord;

\bots\test.js
/**
 * Created by Sonicdeadlock on 5/28/2016.
 */
var chat = require('../chat');
var db = require('../db');
var roomModel = require('../models/room');
var _ = require('lodash');


module.exports.init = function(){
    roomModel.find({bots:{"$elemMatch":{name:"test"}}}).then(function(rooms){
        rooms.forEach(function(room){
            chat.on("chat",room._id,function(user,chatToRoom,chatToUser,text){
                chatToUser("hey");
            });
            chat.on('enterRoom',room._id,function(user,chatToRoom,chatToUser){
                chatToUser({username:"Test Bot",text:"Hey "+user.username+", this is just a message to let you know that test bot is running in this room"});
                chatToRoom({username:"Test Bot",text:"Everyone say hey to "+user.username});
            });

            chat.on('preChat',room._id,function(user,chatToRoom,chatToUser,text){
                if(_.startsWith(text,'f')){
                    chatToUser("oh, don't say that");
                    return false;
                }
                if(text==='crash'){
                    chatToUser("hey, don't do that");
                    throw "crash";
                }
            });

            chat.on('exitRoom',room._id,function(user,chatToRoom){
                chatToRoom("farewell "+user.username);
            })
        })
    });
};


\bots\gamblingModes\dice.js
/**
 * Created by Sonicdeadlock on 5/29/2016.
 */
var _ = require('lodash');

function chat(user, player, room, chat, roomChatCallback, userChatCallback){
    if(_.startsWith(chat,'!bet')){
        var pieces = chat.split(' ');
        var bet = Number(pieces[1]);
        if(!bet || bet<1 || bet>player.money){
            userChatCallback('invalid bet')
        }
        else if( _.toLower(pieces[2]) === 'even' || _.toLower(pieces[2]) === 'odd'){
            var value = _.random(1,20);
            var winnings = _.floor(bet/2);
            if(_.toLower(pieces[2]) === 'even' && value%2===0){
                roomChatCallback("Rolled: "+value+" "+user.username+" won $"+winnings);
                player.money+=winnings;
                player.save();
            }else if(_.toLower(pieces[2]) === 'odd' && value%2===1){
                roomChatCallback("Rolled: "+value+" "+user.username+" won $"+winnings);
                player.money+=winnings;
                player.save();
            }else{
                roomChatCallback("Rolled: "+value+" "+user.username+" lost $"+bet);
                player.money-=bet;
                player.save();
            }
        }
        else{
            var numberBetOn = Number(pieces[2]);
            if(!numberBetOn || numberBetOn<=0 || numberBetOn>20){
                userChatCallback('invalid number to bet on')
            }else{
                var value = _.random(1,20);
                var winnings = bet*5;
                if(value===numberBetOn){
                    roomChatCallback("Rolled: "+value+" "+user.username+" won $"+winnings);
                    player.money+=winnings;
                    player.save();
                }else{
                    roomChatCallback("Rolled: "+value+" "+user.username+" lost $"+bet);
                    player.money-=bet;
                    player.save();
                }
            }
        }

    }
}

module.exports.chat = chat;

\bots\gamblingModes\slots.js
/**
 * Created by Sonicdeadlock on 5/29/2016.
 */
var _ = require('lodash');
var playerModel = require('../../models/player');

var losses = 0;
function chat(user, player, room, text, chatToRoom, chatToUser){
    if(text==='!pull' || text.toLowerCase() === "kronk, pull the lever"){
        playerModel.findById(player._id,'tokens').then(function(playerTokens){
           playerTokens = playerTokens.tokens;
            if(playerTokens>0){//has tokens
                var chance = _.random(true);
                var winnings =0;

                if(chance<.0001){//jackpot
                    winnings = losses* _.random(.9,true);
                    chatToRoom(user.username+" just hit the jackpot!!!")
                }else if(chance<.1){//normal win
                    winnings = _.random(1,5);
                }else{ //loss
                    losses++;
                }
                player.tokens = playerTokens-1;
                player.money += winnings;
                if(winnings>0){
                    chatToUser("You won $"+winnings+" in the slots");
                }else{
                    chatToUser("You didn't win anything");
                }
                player.save();
            }else{
                chatToUser("You are out of tokens!");
            }
        });
    }
    else if(_.startsWith(text,'!buy')){
        var amount = Number(text.substr(4));
        var cost = amount*10;
        playerModel.findById(player._id,'money').then(function(playerMoney){
            playerMoney = playerMoney.money;
            if(playerMoney>= cost){
                player.tokens += amount;
                player.money = playerMoney-cost;
                player.save();
                chatToUser("You just bought "+amount+" tokens for $"+cost);
            }
            else{
                chatToUser("You don't have enough money to buy that many tokens");
            }
        })
    }else if(text==='!price'){
        chatToUser('The price of a token is $10')
    }
}

module.exports.chat = chat;

\classes\commands.js
/**
 * Created by Sonicdeadlock on 4/2/2016.
 */
var _ = require('lodash');
var db = require('../db');
var contentModel = require('../models/content');
var content = db.model('content');
var bannedWordModel = require('../models/banned_word');
var banned_word = db.model('banned_word');

var commands = {
    '!test':function(text,emitCallback){
        emitCallback('This is a test');
    },
    '!commands':function(text,emitCallback){
      emitCallback('General commands are:<br>'+_.chain(commands).keys().sort().join('<br>').value());
    },
    '!joke':function(text,emitCallback,user){
        if(user.hasPermission('Joke')){
            content.count({type:'joke'}).exec().then(function(count){
                content.findOne({type:'joke'}).skip(_.random(count-1)).then(function(result){
                    emitCallback(result.content)
                });
            });
        }else{
            emitCallback('You Don\'t have permission to request jokes!');
        }
    },
    '!addJoke':function(text,emitCallback,user){
        if(user.hasPermission('Joke Admin')){
            var joke = text.substr('!addJoke'.length);
            (new content({type:'joke',content:joke})).save()
            .then(function(){
                emitCallback('Joke Added');
            })
        }else{
            emitCallback('You Don\'t have permission to add jokes!');
        }
    },
    '!proverb':function(text,emitCallback,user){
        if(user.hasPermission('Proverb')){
            content.count({type:'proverb'}).exec().then(function(count){
                content.findOne({type:'proverb'}).skip(_.random(count-1)).then(function(result){
                    emitCallback(result.content)
                });
            });
        }else{
            emitCallback('You Don\'t have permission to request proverbs!');
        }
    },
    '!addProverb':function(text,emitCallback,user){
        if(user.hasPermission('Proverb Admin')){
            var joke = text.substr('!addProverb'.length);
            (new content({type:'proverb',content:joke})).save()
            .then(function(){
                emitCallback('Proverb Added');
            })
        }else{
            emitCallback('You Don\'t have permission to add proverbs!');
        }
    },
    '!pickupLine':function(text,emitCallback,user){
        if(user.hasPermission('Pickup Line')){
            content.count({type:'pickupLine'}).exec().then(function(count){
                content.findOne({type:'pickupLine'}).skip(_.random(count-1)).then(function(result){
                    emitCallback(result.content)
                });
            });
        }else{
            emitCallback('You Don\'t have permission to request Pickup Lines!');
        }
    },
    '!addPickupLine':function(text,emitCallback,user){
        if(user.hasPermission('Pickup Line Admin')){
            var joke = text.substr('!addPickupLine'.length);
            (new content({type:'pickupLine',content:joke})).save()
                .then(function(){
                    emitCallback('Pickup Line Added');
                })
        }else{
            emitCallback('You Don\'t have permission to add Pickup Lines!');
        }
    },
    '!addBannedWord':function(text,emitCallback,user){
        if(user.hasPermission('Chat Admin')){
            var word = text.substr('!addBannedWord'.length);
            (new banned_word({word:word})).save()
                .then(function(){
                    emitCallback('Banned Word Added');
                },function(err){
                    console.log(err);
                })
        }else{
            emitCallback('You Don\'t have permission to ban words!');
        }
    },
    '!addHangmanWord':function(text,emitCallback,user){
        if(user.hasPermission('Hangman Admin')){
            var word = text.substr('!addHangmanWord'.length);
            (new content({type:'hangmanWord',content:word})).save()
                .then(function(){
                    emitCallback('Hangman Word Added');
                },function(err){
                    console.log(err);
                })
        }else{
            emitCallback('You Don\'t have permission to hangman words!');
        }
    }
};
function isCommand(text){
    var cmds = _.keys(commands);
    return (cmds.indexOf(text.split(' ')[0])!=-1);
}

function execute(text,emitCallback,user){
    if(isCommand(text)){
        commands[text.split(' ')[0]](text,emitCallback,user);
    }
}

module.exports = {
    isCommand:isCommand,
    execute:execute
};

\classes\textMod.js
/**
 * Created by Sonicdeadlock on 3/27/2016.
 */
var db = require('../db');
var _ = require('lodash');

var char_replaceModel = require('../models/char_replace');
var char_replace = db.model('character_replacements');


function leet(chance,text){
     chance = chance/100;
    return char_replace.find({}).cache().exec().then(function(replacements){
        var result = _.map(text.split(' '),function(word){
            word = _.map(word,function(character){
                if(Math.random()>chance)//if the chance is not meet dont chance the character
                    return character;
                var options = _.find(replacements,{character: _.toLower(character)});
                if(options ==undefined )//if the character has no replacements dont' change it
                    return character;
                return _.sample(options.replacements);

            }).join('');
            if(Math.random()>chance/10)
                return word+' ';
            var word_options = [
                function(word){
                    return "<<"+word+">> ";
                },
                function(word){
                    return "<"+word+"> ";
                },
                function(word){
                    return ""+word+"_";
                }
            ];
            return _.sample(word_options)(word);
        }).join('');
        return result;
    })
}

function remove(character,text){
   return text.split(character).join('')
}
module.exports.leet = leet;
module.exports.remove = remove;

\controllers\forumController.js
/**
 * Created by alexthomas on 5/5/16.
 */
 var db = require('../db');
 var _ = require('lodash');
 require('../models/forum_post');
 var forum_post_model = db.model('forum_post');
 require('../models/forum_thread');
 var forum_thread_model = db.model('forum_thread');
 require('../models/forum_topic');
 var forum_topic_model = db.model('forum_topic');
 var userModel = require('../models/user');
 var user = db.model('user');
 var permissionGroupModel = require('../models/permissionGroup');
 var permissionGroup = db.model('permissionGroup');
 var messageModel = require('../models/message');
 var message = db.model('message')

 function createTopic(topic){
    return (new forum_topic_model(topic)).save();
}
function createThread(thread){
    if(_.isString(thread.tags))
        thread.tags = thread.tags.split(' ');
    return (new forum_thread_model(thread)).save();
}
function createPost(post,user){
    return forum_thread_model.findById(post.thread)
    .then(function(thread){
        if(thread.locked && !user.hasPermission('Forum Admin'))
            throw 'Thread is locked';
        else{
            var threadCreator = thread.creator;
            var postCreator = post.creator;
            if(!postCreator.id === threadCreator.id)
                user.findById(postCreator,'username').then(function(postCreator){
                    (new message({title:postCreator.username+' replied to your thread: '+thread.title,body:post.body,toUser:threadCreator,fromDelete:true})).save();
                });

            return (new forum_post_model(post)).save();
        }
    });
}

function getRootTopics(){
    return forum_topic_model.find({parent:{$exists:false}}).sort('name');
}

function lockThread(threadID,user){
    return forum_thread_model.findByIdAndUpdate(threadID,{locked:true,$push:{history:{action:'lock',actor:user._id}}});
}

function unlockThread(threadID,user){
    return forum_thread_model.findByIdAndUpdate(threadID,{locked:false,$push:{history:{action:'unlock',actor:user._id}}});
}

function pinThread(threadID,user){
    return forum_thread_model.findByIdAndUpdate(threadID,{pinned:true,$push:{history:{action:'pin',actor:user._id}}});
}

function unpinThread(threadID,user){
    return forum_thread_model.findByIdAndUpdate(threadID,{pinned:false,$push:{history:{action:'unpin',actor:user._id}}});
}

function getTopicChildren(topicId,limit,skip){
    var getTopicsQuery = forum_topic_model.find({parent:topicId});
    getTopicsQuery = getTopicsQuery.then(function(results){
     var promises = _.map(results,function(topic){
         var findThreadCountPromise = forum_thread_model.find({topic:topic._id}).count();
         var findTopicCountPromise = forum_topic_model.find({parent:topic._id}).count();
         return Promise.all([findThreadCountPromise,findTopicCountPromise])
         .then(function(results){
             topic = JSON.parse(JSON.stringify(topic));
             topic.threadCount = results[0];
             topic.topicCount = results[1];
             return topic;
         })
     });
     return Promise.all(promises);
 });
    var getThreadsQuery = forum_thread_model.find({topic:topicId});
    getThreadsQuery.sort('-pinned -creationTime');
    if(limit)
        getThreadsQuery.limit(limit);
    if(skip)
        getThreadsQuery.skip(skip);
    getThreadsQuery.populate('creator','username group');
    getThreadsQuery = getThreadsQuery.then(function(results){
        return user.populate(results,{
            path:'creator.group',
            select:'name',
            model:permissionGroup
        })
    }).then(function(threads){
        var promises = _.map(threads,function(thread){
            return forum_post_model.find({thread:thread._id}).count()
            .then(function(count){
                thread = JSON.parse(JSON.stringify(thread));
                thread.postCount = count;
                return thread;
            })
        });
        return Promise.all(promises);
    });

    return Promise.all([getTopicsQuery,getThreadsQuery]).then(function(results){
        return {topics:results[0],threads:results[1]};
    });
}

function replyToPost(reply,user){
    return createPost(reply,user)
        .then(function(post){
            forum_post_model.findById(post.replyTo,'creator')
                .then(function(result){
                    (new message({title:user.username+' replied to your post',body:'[link to thread](#/forum/thread/'+post.thread+')\r\r'+post.body,toUser:result.creator,fromDelete:true})).save();
                });
            return forum_post_model.findByIdAndUpdate(reply.replyTo,{$push:{replies:post._id}});
        });
}

function populatePostReplies(posts){
    var promises = [];
    posts.forEach(function(post){
        var promise = forum_post_model.populate(post,{path:'replies'})
            .then(function(post){
                return post.replies?populatePostReplies(post.replies):post;
            });
        promises.push(promise);
    });
    return Promise.all(promises).then(function(){
        return posts;
    });

}

function getPost(id){
    return forum_post_model.findById(id).populate('creator','username group').then(function(result){
        if(result)
            return user.populate(result,{
                path:'creator.group',
                select:'name',
                model:permissionGroup
            }).then(function(result){
                return populatePostReplies([result])
                    .then(function(posts){
                        return posts[0];
                    });
            });
       else
        return result;

    })
}

function getThread(id){

}


module.exports = {
    getPost:function(req,res){
        getPost(req.params.postId)
            .then(function(post){
                if(!post)
                    res.status(404).send('Post not found');
                else
                    res.json(post);
            },function(err){
                console.error(err);
                res.status(404).send('Post not found');
            })
    },
    populatePostReplies:populatePostReplies,
    createTopic:function(req,res){
        req.body.creator = req.user._id;
        createTopic(req.body).then(function(topic){
            res.status(201).send(topic);
        },function(err){
            res.status(400).send();//assumes that the information that was submitted violates the schema and caused an error when submitting
        })
    },
    createThread:function(req,res){
        req.body.creator = req.user._id;
        createThread(req.body).then(function(thread){
            res.status(201).send(thread);
        },function(err){
            res.status(400).send();//assumes that the information that was submitted violates the schema and caused an error when submitting
        })
    },
    createPost:function(req,res){
        req.body.creator = req.user._id;
        createPost(req.body,req.user).then(function(){
            res.status(201).send();
        },function(err){
            res.status(400).send(err);//assumes that the information that was submitted violates the schema and caused an error when submitting
        })
    },
    lockThread:function(req,res){
        lockThread(req.params.threadId,req.user).then(function(result){
            if(!result)
                res.status(404).send();
            else
                res.status(201).send();
        },function(err){
            console.error(err);
            res.status(500).send('Server encountered an error while processing your request.');
        })
    },
    unlockThread:function(req,res){
        unlockThread(req.params.threadId,req.user).then(function(result){
            if(!result)
                res.status(404).send();
            else
                res.status(201).send();
        },function(err){
            console.error(err);
            res.status(500).send('Server encountered an error while processing your request.');
        })
    },
    unpinThread:function(req,res){
        unpinThread(req.params.threadId,req.user).then(function(result){
            if(!result)
                res.status(404).send();
            else
                res.status(201).send();
        },function(err){
            console.error(err);
            res.status(500).send('Server encountered an error while processing your request.');
        })
    },
    pinThread:function(req,res){
        pinThread(req.params.threadId,req.user).then(function(result){
            if(!result)
                res.status(404).send();
            else
                res.status(201).send();
        },function(err){
            console.error(err);
            res.status(500).send('Server encountered an error while processing your request.');
        })
    },
    getRootTopics:function(req,res){
        getRootTopics().then(function(results){
            res.json(results);
        },function(err){
            console.error(err);
            res.status(500).send('Server encountered an error while processing your request.');
        })
    },
    getTopicChildren:function(req,res){
        var limit = req.query.limit||15;
        if(limit>100)
            limit=15;
        getTopicChildren(req.params.topicId,limit,req.query.skip)
        .then(function(results){
            res.json(results);
        },function(err){
            console.error(err);
            res.status(500).send('Server encountered an error while processing your request.');
        })
    },
    getByTag:function(req,res){
        var tags = [];
        if(req.params.tag){
            tags.push(req.params.tag)
        }else if(req.body.tags){
            tags = req.body.tags;
        }
        else{
            throw 'No Tags';
        }
        var limit = req.query.limit || 15;
        if(limit>100)
        limit=15;
        var skip = req.query.skip || 0;
        forum_thread_model.find({tags:{$in:tags}})
            .sort('-creationTime')
            .limit(limit)
            .skip(skip)
            .populate('creator','username group')
            .then(function(threads){
                var promises = _.map(threads,function(thread){
                    return forum_post_model.find({thread:thread._id}).count()
                        .then(function(count){
                            thread = JSON.parse(JSON.stringify(thread));
                            thread.postCount = count;
                            return thread;
                        })
                });
                return Promise.all(promises);
            })
            .then(function(results){
               res.json(results);
            });

    },
    search:function(req,es){
//TODO:
    },
    replyToPost:function(req,res){
        var reply = req.body;
        reply.replyTo = req.params.postId;
        reply.creator = req.user._id;
        replyToPost(reply,req.user)
            .then(function(){
                res.status(201).send();
            },function(err){
                console.log(err);
                res.status(400).send(err);//assumes that the information that was submitted violates the schema and caused an error when submitting
            });
    },

};


\controllers\messageController.js
/**
 * Created by alexthomas on 1/2/16.
 */
var db = require('../db');
var _ = require('lodash');
var messageModel = require('../models/message');
var message = db.model('message');


var exports = module.exports;
var failRespond = function(res){res.status(500).send("failure to respond error")};
exports.create = function(req,res){
    var body = req.body;
    if(!(body.toUser && body.body)){
        res.status(412).send();
    }else{
        var newMessage = {};
        newMessage.toUser = body.toUser;
        newMessage.fromUser = req.user._id;
        newMessage.body = body.body;
        newMessage.title = body.title;
        newMessage.replyBody = body.replyBody;
        var m = new message(newMessage);
        m.save(function (err,data) {
            if(err) res.send(err);
            else res.status(201).send();
        });

    }
};

exports.get = function(req,res){
    var messageId = req.params.id;
    var userId = req.user._id;
    var query = {};
    if(req.user.hasPermission('violate privacy'))
    {
        query={_id:messageId}
    }else{
        query={_id:messageId,$or:[{fromUser:userId},{toUser:userId}]}
    }
    message.findOne(query,'_id').then(function(doc){
        if(!doc){
            res.status(403).send();
        }else{
            message.findOne({_id:messageId})
                .populate('toUser',req.user.group.userAccess)
                .populate('fromUser',req.user.group.userAccess)
                .exec(function(err,doc){
                    if(err) res.status(500).send(err);
                    else res.send(doc)
                })
        }
    });

};

exports.mine = function(req,res){â¨
    var response = {};â¨
    message.find({fromUser:req.user._id,fromDelete:false},"_id title time toUser").populate("toUser","username").then(function(docs){
        response.sent = docs;â¨
        message.find({toUser:req.user._id,toDelete:false},"_id title time fromUser read")
            .populate('fromUser','username')â¨
            .then(function(docs){
                    response.received = docs;
                    res.json(response);â¨
                }â¨);â¨
    })â¨};

exports.markRead = function(req,res){
    var messageId = req.params.id || req.body.id;
    message.findOne({_id:messageId,toUser:req.user._id},'_id').then(function(doc){
        if(!doc){
            res.status(403).send();
        }
        else{
            message.update({_id:messageId},{read:true}).then(function(){
                res.status(200).send();
            });
        }
    })
};

exports.delete = function(req,res,next){
    var messageId = req.params.id;
    var userId = req.user._id;
    message.update({_id:messageId,toUser:userId},{toDelete:true}).then();
    message.update({_id:messageId,fromUser:userId},{fromDelete:true}).then();
    res.status(200).send();

};



\controllers\roomController.js
/**
 * Created by alexthomas on 4/17/16.
 */
var db = require('../db');
var _ = require('lodash');
var roomModel = require('../models/room');
var room = db.model('room');
var roomSocketHandle = require('../roomSocketHandle');
var botReset = require('../bots/bots');

function create(req,res){
    var user = req.user;
    if(user.hasPermission('Room Admin')){
        (new room(req.body).save()).then(function(){//resolve
            roomSocketHandle.updateRooms();
            res.status(200).send();
        },
        function(error){//reject
            console.error(error);
            res.status(500).send('There was an error saving the room');
        })
    }else{
        res.status(403).send('Invalid Authorization')
    }
}


function remove(req,res){
    var user = req.user;
    if(user.hasPermission('Room Admin')){
        room.findOneAndRemove({_id:req.params.id}).then(function(){
            roomSocketHandle.updateRooms();
            res.status(200).send();
        })
    }else{
        res.status(403).send('Invalid Authorization')
    }

}

function get(req,res){
    room.find({}).then(function(rooms){
        res.json(rooms);
    })
}

function addBot(req,res){
    var id = req.body.id,
        bot = req.body.bot;
        bot = {name:bot};
        var user = req.user;
        if(user.hasPermission('Room Admin')){
            room.findByIdAndUpdate(id,{$push:{bots:bot}}).then(function(){
                res.status(200).send();
                botReset();
                roomSocketHandle.updateRooms();
            },function(error){console.error(error);});
        }else{
            res.status(403).send('Invalid Authorization')
        }
    
}

function removeBot(req,res){
    var id = req.body.id,
        bot = req.body.bot;
        bot = {name:bot};
    var user = req.user;
    if(user.hasPermission('Room Admin')){
        room.findByIdAndUpdate(id,{$pull:{bots:bot}}).then(function(){
            res.status(200).send();
            botReset();
            roomSocketHandle.updateRooms();
        },function(error){console.error(error);});
    }else{
        res.status(403).send('Invalid Authorization')
    }
}

function removeBan(req,res){
    var id = req.body.id,
        ban = req.body.ban;

    var user = req.user;
    if(user.hasPermission('Room Admin')){
        room.findByIdAndUpdate(id,{$pull:{bans:ban}}).then(function(){
            res.status(200).send();
            roomSocketHandle.updateRooms();
        });
    }else{
        res.status(403).send('Invalid Authorization')
    }
}

function changeDescription(req,res){
    var id = req.body.id,
        description = req.body.description;

    var user = req.user;
    if(user.hasPermission('Room Admin')){
        room.findByIdAndUpdate(id,{description:description}).then(function(){
            res.status(200).send();
            roomSocketHandle.updateRooms();
        });
    }else{
        res.status(403).send('Invalid Authorization')
    }
}

function changeName(req,res){
    var id = req.body.id,
        name = req.body.name;

    var user = req.user;
    if(user.hasPermission('Room Admin')){
        room.findByIdAndUpdate(id,{name:name}).then(function(){
            res.status(200).send();
            roomSocketHandle.updateRooms();
        });
    }else{
        res.status(403).send('Invalid Authorization')
    }
}

function changePassword(req,res){
    var id = req.body.id,
        password = req.body.password;

    var user = req.user;
    if(user.hasPermission('Room Admin')){
        room.findByIdAndUpdate(id,{password:password}).then(function(){
            res.status(200).send();
            roomSocketHandle.updateRooms();
        });
    }else{
        res.status(403).send('Invalid Authorization')
    }
}

function changeOptions(req,res){
    var id = req.body.id,
        options = req.body.options;

    var user = req.user;
    if(user.hasPermission('Room Admin')){
        room.findByIdAndUpdate(id,{options:options}).then(function(){
            res.status(200).send();
            roomSocketHandle.updateRooms();
        });
    }else{
        res.status(403).send('Invalid Authorization')
    }
}


module.exports.create = create;
module.exports.remove = remove;
module.exports.get = get;

module.exports.addBot = addBot;
module.exports.removeBot = removeBot;
module.exports.removeBan = removeBan;
module.exports.changeDescription = changeDescription;
module.exports.changeName = changeName;
module.exports.changePassword = changePassword;
module.exports.changeOptions = changeOptions;

\controllers\updateNotesController.js
/**
 * Created by Sonicdeadlock on 4/24/2016.
 */
var db = require('../db');
var _ = require('lodash');
var update_notesModel = require('../models/update_notes');
var update_notes = db.model('update_notes');
var userModel = require('../models/user');
var user = db.model('user');
var permissionGroupModel = require('../models/permissionGroup');
var permissionGroup = db.model('permissionGroup');

var get = function(req,res){
    var skip = req.params.skip || 0;
    var limit = req.params.limit || 10;
    if(limit>25){
        limit = 25;
    }
    update_notes.find({release_time:{$lte: _.now()}})
        .populate('user','_id username firstName lastName group')
        .sort('-release_time')
        .limit(limit)
        .skip(skip)
        .then(function(results){
            user.populate(results,{
                path:'user.group',
                select:'name',
                model:permissionGroup
            }).then(function(results){
                res.json(results);
            })
        });
};

var create = function(req,res){
  if(req.user && req.user.hasPermission('Admin')){
      var update_note = req.body;
      update_note.user = req.user._id;
      update_note.time = _.now();
      (new update_notes(req.body)).save().then(function(){
          res.status(200).send();
      })
  }  else{
      res.status(403).send('Invalid Authorization')
  }
};

var count = function(req,res){
    update_notes.find({release_time:{$lte: _.now()}}).count().then(function(count){
        res.json(count);
    })
};

module.exports.get = get;
module.exports.create = create;
module.exports.count = count;

\controllers\userController.js
var db = require('../db');
var config = require('../config');
var crypto = require('crypto');
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var _ = require('lodash');

var userModel = require('../models/user');
var user = db.model('user');
var permissionGroupModel = require('../models/permissionGroup');
var permissionGroup = db.model('permissionGroup');

function hash (salt, raw) {
    return crypto.pbkdf2Sync(raw, salt, config.hash.itterations, config.hash.length).toString('base64');
}

module.exports.create = function(req,res){
    var userData = req.body;
    var errors = [];
    if(!userData.firstName)
        errors.push('no first name');
    if(!userData.lastName)
        errors.push('no last name');
    if(!userData.email)
        errors.push('no email');
    if(!userData.password)
        errors.push('no password');
    if(!(userData.password == userData.passwordAgain))
        errors.push("passwords don't match");
    if(!/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(userData.email))
    errors.push("invalid email");

    user.findOne({'username':userData.username}).then(function(obj){
        if(obj)//there is already a user with this username
        {
            errors.push('username is taken');

        }
    }).then(function(){
        if(errors.length==0){//valid user
            userData.joinDate = new Date();
            userData.salt = crypto.randomBytes(128).toString('base64');
            userData.password = hash(userData.salt, userData.password);
            permissionGroup.findOne({default:true},'_id')
            .then(function(group){
                var u = new user(userData);
                u.group = group._id;
                u.save(function(err,data){
                    if(err) res.send(err);

                    req.login(u,function(err){
                        res.json({_id:data.id});
                    });
                });
            });
        }else{
            res.status(400).json(errors);
        }
    });
};

module.exports.update = function(req,res){
    var body = req.body;
    if(!user.hasPermission(req.user,'User Admin')){
        res.status(403).send();
    }else{
        if(body.password){
            body.salt = crypto.randomBytes(128).toString('base64');
            body.password = hash(body.salt, body.password);
        }
        if(body.group && !user.hasPermission(req.user,'User Admin')){
            delete body.group;
        }
        user.findOne({'username':body.username}).then(function(obj){
            if(obj && obj.id !== body._id)//there is already a user with this username
            {
                res.status(400).send('Username taken');

            }else{
                user.update({_id:body._id},body,function(err,numModified){
                    if(err) console.error(err);
                    res.status(200).send();
                });

            }
        });

    }
};

module.exports.updateSelf = function(req,res){
    var body = req.body;
    if(!/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(body.email)){
        res.status(400).send('invalid email');
    }
    else{
        if(body.password){
        body.salt = crypto.randomBytes(128).toString('base64');
        body.password = hash(body.salt, body.password);
    }
    if(body.group){
        delete body.group;
    }
    user.findOne({'username':body.username}).then(function(obj){
            if(obj && obj.id !== body._id)//there is already a user with this username
            {
                res.status(400).send('Username taken');

            }else{
                user.update({_id:req.user._id},body,function(err,numModified){
                    if(err) console.error(err);
                    res.status(200).send();
                });

            }
        });
    }
};

module.exports.get = function(req,res){
    if(!(req.user && user.hasPermission(req.user,'User Admin'))){
        res.status(403).send("Unauthorized");
    }else{
        user.find({},req.user.group.userAccess)
        .populate('group')
        .exec(function(err,users){
            res.json(users);
        })
    }
};

module.exports.login = function(req,res,next){
    passport.authenticate('local',function(err,user,info){
        if(err || !user){
            res.status(400).send(info);
        }
        else{
            user.password = undefined;
            user.salt = undefined;

            req.login(user,function(err){
                if(err) {
                    res.status(400).send(err);
                }
                else{
                    res.json(user);
                }
            })
        }
    })(req,res,next);
};

module.exports.logout = function(req,res){
    req.logout();
    res.send();
};

module.exports.self = function(req,res){
    module.exports.requiresLogin(req,res,function(){
        var clone = JSON.parse(JSON.stringify(req.user));
        clone.salt = undefined;
        clone.password = undefined;
        res.json(clone);
    })

};


/**
 * Require login routing middleware
 */
 module.exports.requiresLogin = function(req, res, next) {
    if (!req.isAuthenticated()) { //Use passports is Authenticated function
        return res.status(401).send({
            message: 'User is not logged in'
        });
    }

    next();
};

/**
 * User authorizations routing middleware
 */
 module.exports.hasAuthorization = function(roles) {
    var _this = this;

    return function(req, res, next) {
        _this.requiresLogin(req, res, function() {
            if (_.intersection(req.user.group.permissions, roles).length || req.user.hasPermission('sudo')) {
                return next();
            } else {
                return res.status(403).send({
                    message: 'User is not authorized'
                });
            }
        });
    };
};



/**
 * user serialization
 */
 passport.serializeUser(function(user, done) {
    done(null, user._id);
});

 passport.deserializeUser(function(id, done) {
    user.findById(id).populate('group').exec( function(err, user) {
        done(err, user);
    });
});


/**
 * passport local strategy
 */
 passport.use(new LocalStrategy(
    function(username, password, done) {//passport expects the fields username and password to be passed in the request. this can be changed
        user.findOne({ username: username }, function (err, user) {
            if (err) { return done(err); }
            if (!user) {
                return done(null, false, { message: 'Incorrect username.' });
            }
            if (hash(user.salt,password)!==user.password) {
                return done(null, false, { message: 'Incorrect password.' });
            }
            return done(null, user);
        });
    }
    ));

\models\banned_word.js
/**
 * Created by alexthomas on 4/5/16.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var db = require('../db');
var char_replaceModel = require('./char_replace');
var char_replace = db.model('character_replacements');
var _ = require('lodash');

var banned_wordsSchema = new schema({
    word:{type:String,required:true},
    regex:String,
    overwriteable:{
        type:String,
        default:true
    }
});

banned_wordsSchema.statics.update_regex = function(){
 //todo build regex for banned words from character replacements
};

banned_wordsSchema.pre('save',function(next){
    var self = this;
   if(this.regex)
        next();
    else{
       char_replace.find({}).then(function(replacements){
           replacements = _.map(replacements,function(replacement){
               return {character:replacement.character, replacements:_.map(replacement.replacements,function(characterSet){
                   characterSet = characterSet.replace(new RegExp('\\\\','g'),'\\\\');
                   characterSet = characterSet.replace(new RegExp('\\*','g'),'\\*');
                   characterSet = characterSet.replace(new RegExp('\\(','g'),'\\(');
                   characterSet = characterSet.replace(new RegExp('\\)','g'),'\\)');
                   characterSet = characterSet.replace(new RegExp('\\[','g'),'\\[');
                   characterSet = characterSet.replace(new RegExp('\\]','g'),'\\]');
                   characterSet = characterSet.replace(new RegExp('\\-','g'),'\\-');
                   characterSet = characterSet.replace(new RegExp('\\+','g'),'\\+');
                   characterSet = characterSet.replace(new RegExp('\\?','g'),'\\?');
                   characterSet = characterSet.replace(new RegExp('\\|','g'),'\\|');
                   characterSet = characterSet.replace(new RegExp('\\{','g'),'\\{');
                   characterSet = characterSet.replace(new RegExp('\\}','g'),'\\}');
                   characterSet = characterSet.replace(new RegExp('\\$','g'),'\\$');
                   characterSet = characterSet.replace(new RegExp('\\/','g'),'\\/');
                   return "("+characterSet+")";
               })}
           });
           self.regex = _.map(self.word,function(letter){
               var replacement = _.find(replacements,{character:letter});
               if(!replacement){
                   return letter;
               }
               else{
                   return '('+replacement.replacements.join('|')+')';
               }
           }).join('');
           next();
       });
   }
});

module.exports = mongoose.model('banned_word',banned_wordsSchema);

\models\char_replace.js
/**
 * Created by alexthomas on 3/26/16.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var db = require('../db');

var character_replacementSchema = new schema({
    character:String,
    replacements:[String]
});


module.exports = mongoose.model('character_replacements',character_replacementSchema);


\models\chat.js
/**
 * Created by alexthomas on 12/11/15.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var db = require('../db');
var userModel = require('./user');
var user = db.model('user');

var chatSchema = new schema({
    text:String,
    time:Date,
    user:{
        type:schema.Types.ObjectId,
        ref:'user',
        field:'_id'
    },
    room:{
        type:schema.Types.ObjectId,
        ref:'room',
        field:"_id"
    }
});


module.exports = mongoose.model('chat',chatSchema);

\models\content.js
/**
 * Created by Sonicdeadlock on 4/2/2016.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var db = require('../db');

var contentSchema = new schema({
    type:String,
    content:String
});


module.exports = mongoose.model('content',contentSchema);

\models\forum_post.js
/**
 * Created by alexthomas on 5/5/16.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var db = require('../db');
var _ = require('lodash');
var forum_thread_model = require('./forum_thread');

var forum_postSchema = new schema({
    body:String,
    creator:{
        type:schema.Types.ObjectId,
        ref:'user',
        field:'_id',
        required:true
    },
    thread:{
        type:schema.Types.ObjectId,
        ref:'forum_thread',
        field:'_id',
        required:true
    },
    replyTo:{
        type:schema.Types.ObjectId,
        ref:'forum_post',
        field:'_id'
    },
    replies:[{
        type:schema.Types.ObjectId,
        ref:'forum_post',
        field:'_id'
    }],
    creationTime:{
        type:Date,
        default:Date.now
    },
    lastUpdateTime:{
        type:Date,
        default:Date.now
    }
});

forum_postSchema.pre('findOneAndUpdate',function(){
    if(!(this._update.$push && this._update.$push.replies))
        this.update({},{ $set: { lastUpdateTime: new Date() } });

});

forum_postSchema.post('findOneAndUpdate',function(){
    forum_thread_model.findByIdAndUpdate(this.thread,{ $set: { lastUpdateTime: new Date() } }).then();
});

forum_postSchema.post('save',function(){
    forum_thread_model.findByIdAndUpdate(this.thread,{$set:{lastUpdateTime:new Date()}}).then();
});

forum_postSchema
    .pre('findOne', populateCreator)
    .pre('find', populateCreator);

function populateCreator(next){
    this.populate('creator');
    next();
}
module.exports = mongoose.model('forum_post',forum_postSchema);

\models\forum_thread.js
/**
 * Created by alexthomas on 5/5/16.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var db = require('../db');
var _ = require('lodash');

var forum_threadSchema = new schema({
    title:String,
    postRequirements:[String],
    tags:[String],
    creator:{
        type:schema.Types.ObjectId,
        ref:'user',
        field:'_id',
        required:true
    },
    topic:{
        type:schema.Types.ObjectId,
        ref:'forum_topic',
        field:'_id',
        required:true
    },
    creationTime:{
        type:Date,
        default: Date.now
    },
    lastUpdateTime:{
        type:Date,
        default: Date.now
    },
    locked:{
        type:Boolean,
        default:false
    },
    pinned:{
        type:Boolean,
        default:false
    },
    views:{
        type:Number,
        default:0
    },
    history:[{
        date:{type:Date,default:Date.now},
        actor:{
            type:schema.Types.ObjectId,
            ref:'user',
            field:'_id',
            required:true
        },
        action:String
    }]
});

module.exports = mongoose.model('forum_thread',forum_threadSchema);

\models\forum_topic.js
/**
 * Created by alexthomas on 5/5/16.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var db = require('../db');

var forum_topicSchema = new schema({
    name:String,
    description:String,
    postRequirements:[String],
    creator:{
        type:schema.Types.ObjectId,
        ref:'user',
        field:'_id',
        required:true
    },
    parent:{
        type:schema.Types.ObjectId,
        ref:'forum_topic',
        field:'_id'
    },
    icon:String,
    iconStyle:String
});


module.exports = mongoose.model('forum_topic',forum_topicSchema);

\models\message.js
/**
 * Created by alexthomas on 1/2/16.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;

var messageSchema = new schema({
    fromUser:{
        type: schema.Types.ObjectId,
        ref:"user",
        field:'_id'
    },
    toUser:{
        type: schema.Types.ObjectId,
        ref:"user",
        field:'_id'
    },
    title:String,
    body:String,
    replyBody:String,
    read:{type:Boolean,default:false},
    fromDelete:{type:Boolean,default:false},
    toDelete:{type:Boolean,default:false},
    time: { type: Date, default: Date.now }
});

module.exports = mongoose.model('message',messageSchema);



\models\permissionGroup.js
var mongoose = require('mongoose');
var schema = mongoose.Schema;

var permissionGroupSchema = new schema({
    name:String,
    permissions:[],
    default:Boolean,
    userAccess:String
});

module.exports = mongoose.model('permissionGroup',permissionGroupSchema);


\models\player.js
/**
 * Created by alexthomas on 4/11/16.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var _ = require('lodash');

var playerSchema = new schema({
    user:{
        type:schema.Types.ObjectId,
        ref:'user',
        field:'_id'
    },
    stats:{
        level:{default:0,type:Number},
        strength:{default:0,type:Number},
        intelligence:{default:0,type:Number},
        constitution:{default:0,type:Number},
        wisdom:{default:0,type:Number},
        dexterity:{default:0,type:Number},
        agility:{default:0,type:Number},
        BEN:{default:0,type:Number}
    },
    money:{default:10,type:Number},
    tokens:{default:0,type:Number}
});

playerSchema.virtual('stats.minAttack').get(function(){return 0;});
playerSchema.virtual('stats.maxAttack').get(function(){return 0;});
playerSchema.virtual('stats.mAtk').get(function(){return 0;});
playerSchema.virtual('stats.critical').get(function(){
    return _.floor(this.stats.BEN +(this.stats.dexterity/10));
});
playerSchema.virtual('stats.HP').get(function(){
    return _.floor((this.stats.level*100) * (Math.pow(1.05,this.stats.constitution)));
});
playerSchema.virtual('stats.SP').get(function(){
    return _.floor((this.stats.level*100) * (Math.pow(1.05,this.stats.intelligence)));
});
playerSchema.virtual('stats.HDef').get(function(){return 0;});
playerSchema.virtual('stats.SDef').get(function(){return 0;});
playerSchema.virtual('stats.hit').get(function(){
    return _.floor(180+this.stats.dexterity+this.stats.level);
});
playerSchema.virtual('stats.flee').get(function(){
    return _.floor(100+this.stats.dexterity/3+this.stats.BEN+this.stats.agility);
});

module.exports = mongoose.model('player',playerSchema);

\models\room.js
/**
 * Created by Sonicdeadlock on 4/1/2016.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;

var roomSchema = new schema({
    name:String,
    deletable:Boolean,
    description:String,
    password:String,
    bots:{type:[{name:String}],default:[]},
    bans:{type:[{type:schema.Types.ObjectId,
            ref:'user',
            field:'_id'}],
        default:[]},
    options:Object
});

module.exports = mongoose.model('room',roomSchema);


\models\token.js
/**
 * Created by alexthomas on 4/14/16.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var db = require('../db');

var tokenSchema = new schema({
    type:String,
    token:String,
    tokenData:Object
});


module.exports = mongoose.model('token',tokenSchema);

\models\update_notes.js
/**
 * Created by Sonicdeadlock on 4/2/2016.
 */
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var db = require('../db');

var update_notesSchema = new schema({
    content:String,
    title:String,
    release_time:Date,
    user:{
        type:schema.Types.ObjectId,
        ref:'user',
        field:'_id'
    }
});


module.exports = mongoose.model('update_notes',update_notesSchema);

\models\user.js
var mongoose = require('mongoose');
var schema = mongoose.Schema;
var db = require('../db');
var permissionGroupModel = require('./permissionGroup');
var permissionGroup = db.model('permissionGroup');

var userSchema = new schema({
    firstName:String,
    lastName:String,
    joinDate:Date,
    username:{type:String,index:true},
    password:String,
    salt:String,
    email:String,
    group:{
        type: schema.Types.ObjectId,
        ref:"permissionGroup",
        field:'_id'
    },
    chat:{
        nameColor:String,
        nameBackgroundColor:String,
        nameFont:String,
        textColor:String,
        textBackgroundColor:String,
        textFont:String
    },
    strikes:{
        chat:{default:0,type:Number},
        bans:{default:0,type:Number}
    }
});

userSchema
    .pre('findOne', populateGroup)
    .pre('find', populateGroup);

function populateGroup(next){
    this.populate('group');
    next();
}



userSchema.methods.hasPermission = function(perm){
    if(!this.group) return false;
    if(this.group.permissions.indexOf('god')!=-1 || this.group.permissions.indexOf('sudo')!=-1) return true;
    if(this.group.permissions.indexOf(perm)!=-1) return true;
    return false;
};

userSchema.statics.hasPermission = function(user,perm){
    if(!user.group) return false;
    if(user.group.permissions.indexOf('god')!=-1 || user.group.permissions.indexOf('sudo')!=-1) return true;
    if(user.group.permissions.indexOf(perm)!=-1) return true;
    return false;
};



module.exports = mongoose.model('user',userSchema);


\public\admin\app.js
/**
 * Created by Sonicdeadlock on 7/21/2015.
 */
'use strict';

var app = angular.module('userApp', [
    'ngResource',
    'ui.router',
    'controllers',
    'services',
    'directives',
    'ngSanitize'
]);
app.run(['$rootScope', '$state', '$stateParams','$http','$window','$location', function ($rootScope, $state, $stateParams,$http,$window,$location) {
    $rootScope.$on("$stateChangeError", console.log.bind(console));

    //Save a copy of the parameters so we can access them from all the controllers
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $http.get('/auth/self').success(function(data){
        $rootScope.logged_in_user = data;


    });
    $rootScope
        .$on('$stateChangeSuccess',
            function(event){
                if (!$window.ga)
                    return;
                $window.ga('send', 'pageview', { page: $location.path() });
            });
    $rootScope.hasPermission = function(perm){
        var user = $rootScope.logged_in_user;
        if(!user || !user.group || !user.group.permissions) return false;
        var permissions = user.group.permissions;
        if(permissions.indexOf('god')!=-1 || permissions.indexOf('sudo')!=-1) return true;
        if(permissions.indexOf(perm)!=-1) return true;
        return false;
    }
}]);
app.config(['$stateProvider','$urlRouterProvider',function($stateProvider,$urlRouterProvider){
   $urlRouterProvider.otherwise('/user');

    $stateProvider
        .state('user',{
            url:'/user',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"/user/components/manage/manageView.html",
                    controller:"manageController"
                }
            }
        })
        .state('room',{
            url:'/room',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/room/roomView.html",
                    controller:"roomController"
                }
            }
        })
        .state('update_notes',{
            url:'/update_notes',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/updateNotes/updateNotesAdminView.html",
                    controller:"updateNotesController"
                }
            }
        })
}]);
app.factory('socket', function () {
    return _.noop;
});
angular.module('controllers',['ngAnimate','mgcrea.ngStrap']);
angular.module('directives',['ngAnimate','mgcrea.ngStrap']);
angular.module('services',[]);

\public\admin\index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title></title>

    <link rel="stylesheet" href="/bower_components/bootstrap-css/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bower_components/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="/bower_components/angular-motion/dist/angular-motion.min.css">
    <link rel="stylesheet" href="style.css">

    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,600,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Karla:400,700' rel='stylesheet' type='text/css'>
</head>
<body ng-app="userApp">
    <!--resources-->
    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
    <script src="/bower_components/angular/angular.js"></script>
    <script src="/bower_components/angular-sanitize/angular-sanitize.min.js"></script>
    <script src="/bower_components/angular-resource/angular-resource.js"></script>
    <script src="/bower_components/angular-ui-router/release/angular-ui-router.js"></script>
    <script src="/bower_components/bootstrap-css/js/bootstrap.min.js"></script>
    <script src="/bower_components/angular-animate/angular-animate.min.js"></script>
    <script src="/bower_components/angular-strap/dist/angular-strap.min.js"></script>
    <script src="/bower_components/angular-strap/dist/angular-strap.tpl.min.js"></script>
    <script src="/bower_components/lodash/dist/lodash.min.js"></script>


    <!--custom css-->
    <link href="/style.css" rel="stylesheet" type="text/css">
    <!--application-->
    <script src="app.js"></script>
    <script src="components/navbar/navbarController.js"></script>
    <script src="components/room/roomController.js"></script>
    <script src="components/updateNotes/updateNotesAdminController.js"></script>
    <script src="user/components/login/loginController.js"></script>
    <script src="/user/components/manage/manageController.js"></script>

    <div ui-view="navbar"></div>
    <div ui-view="content"></div>
</body>

<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-77555207-1', 'auto');

</script>
</html>

\public\admin\style.css
.ng-invalid.ng-touched{
    border-color:#ac2925;
}

#groups,#users,#rooms{
    max-height:400px;
    overflow:auto;
    border: 1px solid #e3e3e3;
}

#groups .selected,#users .selected,#rooms .selected{
    border: 1px solid #e3e3e3;
    background-color: #EAEAEA;
    padding: 9px
}

#groups *,#users *,#rooms *:not(.fa){
    padding:10px;
}

.modal.center{
    top:auto;
    bottom: auto;
}

.modal.center .modal-dialog{
    top:120px;
}

\public\admin\components\navbar\navbarController.js
/**
 * Created by alexthomas on 7/21/15.
 */
angular.module('controllers').controller('navbarController',function($scope,$http,$rootScope){
    $scope.logout = function(){
        $http.get('/api/users/logout').success(function(){
            $rootScope.logged_in_user = undefined;
        })
    }
});

\public\admin\components\navbar\navbarView.html
<nav class="navbar navbar-inverse">
    <div class="navbar-header">
        <button class="navbar-toggle collapsed" data-target="#user-navbar-collapse-1" data-toggle="collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>

    </div>
    <div class="collapse navbar-collapse" id="user-navbar-collapse-1">
        <ul class="nav navbar-nav">
            <li><a href="/">Home</a></li>
            <li><a ui-sref="user">User</a></li>
            <li ng-if="hasPermission('Admin')"><a ui-sref="update_notes">Update Notes</a></li>
            <li><a ui-sref="room">Room</a></li>
        </ul>
        <ul class="nav navbar-nav navbar-right">
            <li class="" ng-if="!logged_in_user"><a title="Login" data-template-url="components/login/loginDirective.html"   data-placement="bottom" data-animation="am-flip-x" data-container='body' bs-popover>Login</a></li>
            <li ng-if="!logged_in_user"><a href="#/register?next={{$state.$current.url.source}}">Register</a></li>
            <li class="" ng-if="logged_in_user"><a ng-click="logout()">Logout</a></li>
            <li class="" ng-if="logged_in_user"><a>Welcome {{logged_in_user.firstName}}</a></li>
        </ul>
    </div>
</nav>

\public\admin\components\room\addRoomTemplate.html


<div class="modal fade">
    <div class="modal-dialog clearfix">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" ng-click="$hide"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title">Add Room</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="roomName">Room Name</label>
                    <input ng-model='newRoom.name' class="form-control" id='roomName'>
                </div>
                <div class="form-group">
                    <label for="roomDescription">Room Description</label>
                    <input ng-model='newRoom.description' class="form-control" id='roomDescription'>
                </div>
                <div class="form-group">
                    <label for="roomPassword">Room Password</label>
                    <input ng-model='newRoom.password' class="form-control" id='roomPassword' placeholder='Leave Blank for no Password'>
                </div>
                <!--<label>*Green means the room is deletable. Red means that it is not.</label>-->
                <!--</br>-->
                <!--<button type="button" class="btn " ng-class="newRoom.deletable ? 'btn-success active' : 'btn-danger'" data-toggle='button' ng-click="newRoom.deletable = !(newRoom.deletable == true)" id='isDeletable'>Is Deletable</button>-->
                <label>Deletable:</label>
                <button type="button" class="btn btn-default" ng-model="newRoom.deletable" bs-checkbox>Deletable</button>
                </br>
                </br>
                <label>Entrance Messages:</label>
                <button type="button" class="btn btn-default" ng-model="newRoom.options.entranceMessages" bs-checkbox>Entrance Messages</button>
                </br>
                </br>
                <label>Exit Messages:</label>
                <button type="button" class="btn btn-default" ng-model="newRoom.options.exitMessages" bs-checkbox>Exit Messages</button>
                </br>
                </br>
                <label>Bots: </label>
                <button class="btn btn-default" ng-model="newRoom.bots" bs-select data-multiple="1" data-iconCheckmark=" fa fa-ok" data-all-none-buttons="true" bs-options="botOption for botOption in botOptions"></button>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" ng-click="$hide">Close</button>
                <button type="button" ng-click='addRoom();$hide()' class="btn btn-primary">Submit</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

\public\admin\components\room\roomController.js
/**
 * Created by alexthomas on 4/17/16.
 */
angular.module('controllers').controller('roomController',function($scope,$http,$rootScope){
    $http.get('/api/rooms').success(function(data){
       $scope.rooms = data;
    });
    $scope._ = _;
    $scope.selectedRoom = undefined;
    $scope.newRoom = {deletable:true,bots:[],options:{}};
    $scope.botOptions=['basic','hangman','gamble','test'];
    $scope.addRoom = function(){
        $scope.newRoom.bots = _.map($scope.newRoom.bots,function(bot){return {name:bot};});
       $http.post('/api/rooms/',$scope.newRoom)
           .success(function(){
               $http.get('/api/rooms').success(function(data){
                   $scope.rooms = data;
               });
           });
    };
    $scope.selectRoom = function(room){
        $scope.selectedRoom = room;
        if($scope.selectedRoom.bans){
            $scope.selectedRoom.bans = _.map($scope.selectedRoom.bans,function(ban){
                return {username:'',id:ban};
            });
            _.forEach($scope.selectedRoom.bans,function(ban){
                $http.post('/api/users/getUser',{_id:ban.id}).success(function(data){
                    _.find($scope.selectedRoom.bans,{id:ban.id}).username = data.username;
                })
            });

        }
    };
    $scope.updateName = function(){//use selected room
        $http.post('/api/rooms/changeName',{id:$scope.selectedRoom._id,name:$scope.selectedRoom.name});
    };
    $scope.updateDescription = function(){//use selected room
        $http.post('/api/rooms/changeDescription',{id:$scope.selectedRoom._id,description:$scope.selectedRoom.description});
    };
    $scope.updatePassword = function(){//use selected room
        $http.post('/api/rooms/changePassword',{id:$scope.selectedRoom._id,password:$scope.selectedRoom.password});
    };
    $scope.updateOptions = function(){//use selected room
        $http.post('/api/rooms/changeOptions',{id:$scope.selectedRoom._id,options:$scope.selectedRoom.options});
    };
    $scope.removeBan = function(id){//use selected room for room-id
        $http.post('/api/rooms/removeBan',{id:$scope.selectedRoom._id,ban:id})
            .success(function(){
                _.remove($scope.selectedRoom.bans,{id:id})
            });
    };
    $scope.toggleBot = function(bot){//use selected room for id and reference
        if(_.find($scope.selectedRoom.bots,{name:bot})){
            $http.post('/api/rooms/removeBot',{id:$scope.selectedRoom._id,bot:bot});
            $scope.selectedRoom.bots = _.reject( $scope.selectedRoom.bots,{name:bot});
        }else{
            $http.post('/api/rooms/addBot',{id:$scope.selectedRoom._id,bot:bot});
            $scope.selectedRoom.bots.push({name:bot})
        }
    };
    $scope.deleteRoom = function(id){
        $http.delete('/api/rooms/delete/'+id)
            .success(function(){
                $http.get('/api/rooms').success(function(data){
                    $scope.rooms = data;
                    $scope.selectedRoom = undefined;
                });
            })
    }
}).filter('startCase',function(){
    return function(input){
        return _.startCase(input);
    }
});

\public\admin\components\room\roomView.html
<div class="col-md-10 col-md-offset-1">
    <h3>Select Room <a bs-modal data-title="Add Room" data-container="body" data-placement="center" data-template-url="components/room/addRoomTemplate.html"><span class="fa fa-plus-square" data-title="Add Room"></span></a></h3>

    <div id="rooms" class="col-md-4">
        <div class="input-group"> <!-- search -->
            <div class="input-group-addon"><span class='fa fa-search fa-1x'></span></div>
            <input type="text" class="form-control"  placeholder="Search" ng-model='searchText'>
        </div>
        <div ng-repeat="room in rooms | orderBy:'name' | filter:{name:searchText}" ng-click="selectRoom(room)" ng-class="{selected:room==selectedRoom}">
            <b>{{room.name}}</b>
        </div>
    </div>
    <div class="col-md-8 pull-right" ng-if="selectedRoom" >
        <button class="btn btn-danger pull-right" ng-click="deleteRoom(selectedRoom._id)">Delete <span class="fa fa-trash"></span></button>
        <br>
        <form >
            <!--room name-->
            <div class="form-group">
                <label>Name:</label>
                <input class="form-control" type="text" ng-model="selectedRoom.name" placeholder="Room Name" ng-blur="updateName()">
            </div>
            <hr>
            <!--room description-->
            <div class="form-group">
                <label>Description:</label>
                <input  class="form-control" type="text" ng-model="selectedRoom.description" placeholder="Room Description" ng-blur="updateDescription()">
            </div>
            <hr>
            <!--room password-->
            <div class="form-group">
                <label>Password:</label>
                <input  class="form-control" type="text" ng-model="selectedRoom.password" placeholder="Room Passowrd" ng-blur="updatePassword()">
            </div>
            <hr>
            <!--room options-->
            <label>Entrance Messages:</label>
            <button type="button" class="btn btn-default" ng-model="selectedRoom.options.entranceMessages" bs-checkbox ng-click="updateOptions()">Entrance Messages</button>
            <hr>
            <label>Exit Messages:</label>
            <button type="button" class="btn btn-default" ng-model="selectedRoom.options.exitMessages" bs-checkbox ng-click="updateOptions()">Exit Messages</button>
            <hr>
            <!--room bots-->
            <div class="btn-group">
                <button ng-repeat="option in botOptions" class="btn btn-default" ng-class="{active:_.find(selectedRoom.bots,{name:option})}" ng-click="toggleBot(option)">{{option | startCase}}</button>
            </div>
            <hr>
            <!--room bans-->

            <div>
                <h3>Bans</h3>
                <h5 ng-repeat="ban in selectedRoom.bans"><a class="fa fa-trash-o text-danger" ng-click="removeBan(ban.id)" title="Remove Ban"></a> {{ban.username}}</h5>
            </div>

        </form>
    </div>

</div>

\public\admin\components\updateNotes\updateNotesAdminController.js
/**
 * Created by Sonicdeadlock on 4/24/2016.
 */
angular.module('controllers').controller('updateNotesController',function($scope,$http,$rootScope){
    $scope.update_note = {release_time: _.now()};


    $scope.submit = function(){
        $http.post('/api/update_notes',$scope.update_note).success(function(data){
            $scope.update_note = {};
        })
    }
});

\public\admin\components\updateNotes\updateNotesAdminView.html
<div class="col-md-offset-1 col-md-10">
    <form ng-submit="submit()" >
        <label class="control-label">Title:</label>
        <input type="text" class="form-control" ng-model="update_note.title">
        <br>
        <div class="form-group form-inline">
            <label>Release Time <span class="fa fa-calendar"></span></label>
            <div class="form-group">
                <input class="form-control" type="text" size="10" ng-model="update_note.release_time" data-autoclose="1" placeholder="Date" bs-datepicker>
            </div>
            <div class="form-group">
                <input class="form-control" type="text" size="10" ng-model="update_note.release_time" data-autoclose="1" placeholder="Time" data-time-format="h:mm:ss a" bs-timepicker>
            </div>
        </div>
        <label class="control-label">Content:</label>
        <textarea class="form-control" style="width:100%;height:100px" ng-model="update_note.content"></textarea>
        <br>
        <button type="submit" class="btn btn-primary pull-right">Submit</button>
    </form>
</div>

\public\index\app.js
/**
 * Created by Sonicdeadlock on 3/1/2016.
 */
'use strict';

var app = angular.module('userApp', [
    'ngResource',
    'ui.router',
    'controllers',
    'services',
    'directives',
    'ngSanitize',
    'btford.socket-io',
    'luegg.directives',
    'uiSwitch',
    'yaru22.angular-timeago',
    'infinite-scroll'

]);

app.run(['$rootScope', '$state', '$stateParams','$http','$window','$location', function ($rootScope, $state, $stateParams,$http,$window,$location) {
    $rootScope.$on("$stateChangeError", console.log.bind(console));

    //Save a copy of the parameters so we can access them from all the controllers
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $rootScope.updateInboxCount = function(){
      $http.get('/api/messages/mine').success(function(data){
          $rootScope.inboxCount = _.filter(data.received,{read:false}).length;
          setTimeout($rootScope.updateInboxCount,
          1000*60*10);//update every 10 minutes
      })
    };
    $http.get('/auth/self').success(function(data){
        $rootScope.logged_in_user = data;
        $rootScope.updateInboxCount();
    });
    $rootScope
        .$on('$stateChangeSuccess',
            function(event){

                if (!$window.ga)
                    return;

                $window.ga('send', 'pageview', { page: $location.path() });
            });
    $rootScope.hasPermission = function(perm){
        var user = $rootScope.logged_in_user;
        if(!user || !user.group || !user.group.permissions) return false;
        var permissions = user.group.permissions;
        if(permissions.indexOf('god')!=-1 || permissions.indexOf('sudo')!=-1) return true;
        if(permissions.indexOf(perm)!=-1) return true;
        return false;
    }

}]);
app.config(['$stateProvider','$urlRouterProvider',function($stateProvider,$urlRouterProvider){
    $urlRouterProvider.otherwise('/');

    $stateProvider
        .state('home',{
            url:'/',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/home/homeView.html",
                    controller:"homeController"
                }
            }
        }).state('chat',{
            url:'/chat',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/chat/chatView.html",
                    controller:"chatController"
                }
            }
        })
        .state('userPage',{
            url:'/user/:userId',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/user/userPageView.html",
                    controller:"userPageController"
                }
            }
        }).state('inbox',{
            url:'/messages/inbox?id',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/messages/inboxView.html",
                    controller:"inboxController"
                }
            }
        })
        .state('compose',{
            url:'/messages/compose?userId&messageId&from',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/messages/composeView.html",
                    controller:"composeController"
                }
            }
        }).
    state('hangmanSetWord',{
        url:'/hangmanSetWord?token',
        views:{
            navbar:{
                templateUrl:"components/navbar/navbarView.html",
                controller:"navbarController"
            },
            content:{
                templateUrl:"components/hangman/hangmanSetWordView.html",
                controller:"hangmanSetWordController"
            }
        }
    })
        .state('forum',{
            url:'/forum',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/forum/forumView.html",
                    controller:"forumController"
                }
            }
        })
        .state('topic',{
            url:'/forum/topic/:topicId?skip&limit',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/forum/forumView.html",
                    controller:"forumController"
                }
            }
        })
        .state('createTopic',{
            url:'/forum/topic?parent',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/forum/createTopicView.html",
                    controller:"forumController"
                }
            }
        })
        .state('createThread',{
            url:'/forum/thread?topicId',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/forum/createThreadView.html",
                    controller:"threadController"
                }
            }
        })
        .state('thread',{
            url:'/forum/thread/:threadId?limit&skip',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/forum/threadView.html",
                    controller:"threadController"
                }
            }
        })
        .state('forumPost',{
            url:'/forum/post/:postId',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/forum/postView.html",
                    controller:"postController"
                }
            }
        })
        .state('forumTagSearch',{
            url:'/forum/search/tag/:tag?tags',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/forum/forumView.html",
                    controller:"forumSearchController"
                }
            }
        });
}]);
app.factory('socket', function (socketFactory) {
    return socketFactory({ioSocket: io.connect()});
});
angular.module('controllers',['ngAnimate','mgcrea.ngStrap','ngCookies']);
angular.module('directives',['ngAnimate','mgcrea.ngStrap']);
angular.module('services',[]);

\public\index\index.html
<!DOCTYPE html>
<html lang="en" style="height:100%">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <base href="/">
    <title></title>

    <link rel="stylesheet" href="/bower_components/bootstrap-css/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bower_components/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="/bower_components/angular-motion/dist/angular-motion.min.css">
    <link rel="stylesheet" href="/bower_components/bootstrap-additions/dist/bootstrap-additions.min.css">
    <link rel="stylesheet" href="/bower_components/angular-ui-switch/angular-ui-switch.min.css">
    <link rel="stylesheet" href="style.css">

    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,600,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Karla:400,700' rel='stylesheet' type='text/css'>
</head>
<body ng-app="userApp" style="height: 100%">
<!--resources-->

<script src="/bower_components/jquery/dist/jquery.min.js"></script>
<script src="/bower_components/angular/angular.js"></script>
<script src="/bower_components/angular-sanitize/angular-sanitize.min.js"></script>
<script src="/bower_components/angular-resource/angular-resource.js"></script>
<script src="/bower_components/angular-ui-router/release/angular-ui-router.js"></script>
<script src="/bower_components/bootstrap-css/js/bootstrap.min.js"></script>
<script src="/bower_components/angular-animate/angular-animate.min.js"></script>
<script src="/bower_components/angular-strap/dist/angular-strap.min.js"></script>
<script src="/bower_components/angular-strap/dist/angular-strap.tpl.min.js"></script>
<script src="/bower_components/angular-scroll-glue/src/scrollglue.js"></script>
<script src="/bower_components/lodash/lodash.js"></script>
<script src="/bower_components/angular-cookies/angular-cookies.js"></script>
<script src="/bower_components/socket.io-client/socket.io.js"></script>
<script src="/bower_components/angular-socket-io/socket.min.js"></script>
<script src="/bower_components/angular-ui-switch/angular-ui-switch.min.js"></script>
<script src="/bower_components/angular-timeago/dist/angular-timeago.min.js"></script>
<script src="/bower_components/ngInfiniteScroll/build/ng-infinite-scroll.min.js"></script>
<script src="/bower_components/markdown/lib/markdown.js"></script>
<!--application-->
<script src="app.js"></script>
<script src="components/navbar/navbarController.js"></script>
<script src="components/home/homeController.js"></script>
<script src="components/chat/chatController.js"></script>
<script src="components/user/userPageController.js"></script>
<script src="user/components/login/loginController.js"></script>
<script src="components/messages/inboxController.js"></script>
<script src="components/messages/composeController.js"></script>
<script src="components/hangman/hangmanSetWordController.js"></script>
<script src="components/forum/forumController.js"></script>
<script src="components/forum/threadController.js"></script>
<script src="components/forum/postController.js"></script>
<script src="components/forum/searchController.js"></script>
<div ui-view="navbar" class="row"></div>
<div ui-view="content" class="row"></div>
</body>
<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-77555207-1', 'auto');

</script>
</html>

\public\index\style.css
.chat-has-username.chat,
.chat:nth-child(even).chat-has-username{
    color: #fff;
    background-color: #d9534f;
    border-color: #d43f3a;
    border-radius: 2px;

}

.chat.chat-has-username> b>a{
    color:#fff;
}

.chat{
    padding:4px 5px 4px 5px;
    margin:0;

}

.chat:nth-child(even) {
    background-color: rgb(194, 194, 194);
}

.remove-padding{
    padding:0px;
}

#chatArea{
    padding-top:10px;
    background-color:#f5f5f5;
    border:1px solid #e3e3e3;
    border-radius: 4px;
}

#alert-container2{
    max-width: 300px;
    right:0;
    z-index: 10;
}

.forum.table > tbody > tr > td {
    vertical-align: middle;
}

.forum .fa {
    width: 1em;
    text-align: center;
}

.forum.table th.cell-stat {
    width: 6em;
}

.forum.table th.cell-stat-2x {
    width: 14em;
}

textarea.forumTextArea{
    width:100%;
    border-top-left-radius:0px !important;
    border-top-right-radius:0px !important;
}

.creator.post-user{
    background-color: #D9EDF7;
}

.post-role{
    color: rgb(43, 140, 70);
}

pre{
    white-space: pre-wrap;
}

.textarea-addon{
    border-radius: 4px 4px 0 0 !important;
    border:1px solid #ccc !important;
    border-bottom: none;
    padding:5px;
    margin-bottom: 0px;
}

.textarea-addon a{
    padding: 5px;
}

.reply-panel{
    border:1px solid #ccc;
    padding:10px;
    padding-top: 15px;
}

.fa-spin.ng-hide-add-active{
    display: none !important;
}

blockquote forum-post{
    font-size: 14px;
}

blockquote hr{
    margin-bottom: 5px;
    margin-top: 5px;
}

.forum-post-button-group{
    margin:3px;
    padding:3px;
    border: 1px solid  #ccc;
}

room *{
    text-overflow:ellipsis;
    overflow: hidden;
    white-space: nowrap;
}


\public\index\components\chat\chatController.js

if ('Notification' in window && Notification.permission !== "granted")
    Notification.requestPermission();
angular.module('controllers').controller('chatController',function($scope,$http,$state,$rootScope,$cookies,socket,$alert,$modal){

    $scope.chats = [];
    $scope.distplayHistory = [];
    $scope.mods = [];
    $scope.roomFilter = {bots:{}};
    $scope.modTypes = [
        {
            name:'removeCharacter',
            template:{remove:''}
        },
        {
            name:'l337',
            template:{chance:10}
        }
    ];
    var historyId = 0;
    var history = [];
    function filterRooms(){
        $scope.displayRooms = _.chain($scope.rooms)
            .filter(function(r){
                var keys = _.keys($scope.roomFilter.bots);
                for(var i=0;i<keys.length;i++){
                    if($scope.roomFilter.bots[keys[i]] && _.map(r.bots,'name').indexOf(keys[i])===-1 )
                        return false;
                }
                return true;
            })
            .filter(function(r){
                if(!$scope.roomFilter.searchText) return true;
                return (r.name.indexOf($scope.roomFilter.searchText)!==-1) ||(r.description?r.description.indexOf($scope.roomFilter.searchText)!==-1:false);
            })
            .value();
    }
    $scope.filterRooms = filterRooms;
    $scope.$watch('roomFilter',function(){
        filterRooms();
    }, _.isEqual);

    $scope.chatRoom = undefined;
    $scope.rooms =[];
    $scope.passwordModal = $modal({scope:$scope,templateUrl:'components/chat/passwordModalTemplate.html',show:false});
    socket.emit('getRooms',{});
    socket.on('chatServerToClient',function(message){
       $scope.chats.push(message);
        if(document.body.className=='blurred'){
            if(Notification && $scope.showAlert){
                var notification = new Notification(message.username, {
                    body: strip(message.text)
                });
                notification.onShow=setTimeout(function(){notification.close();},settings.notifcationDuration || 2000);
                notification.onClick=function(x) { window.focus(); this.cancel(); };
            }
        }
    });

    socket.on('chatRooms',function(rooms){
        $scope.rooms = rooms;
        $scope.bots = _.chain(rooms).map(function(o){
            return _.map(o.bots,'name')
        })
            .flatten().uniq()
            .value();
        filterRooms();
    });
    socket.on('connect',function(){
       if($scope.chatRoom){
           socket.emit('chatEnterRoom',{room:$scope.chatRoom,password:$scope.roompassword});
       }
    });
    socket.on('chatError',function(message){
       var alert = $alert({content:message.error,placement:'top', show:true,type:'danger'});
        setTimeout(function(){
            alert.destroy();
        },1000*6)
    });
    socket.on('chatEnterRoom',function(message){
        $scope.chatRoom = message.room;
    });
    socket.on('chatRoomEntrance',function(username){
        if($scope.chatRoom && $scope.chatRoom.options && $scope.chatRoom.options.entranceMessages)
            $scope.chats.push({text:username+' has entered the room'});
    });
    socket.on('chatRoomExit',function(username){
        if($scope.chatRoom && $scope.chatRoom.options && $scope.chatRoom.options.exitMessages)
            $scope.chats.push({text:username+' has left the room'});
    });

    $scope.exitRoom = function(){
      socket.emit('chatLeaveRoom',{});
        $scope.chatRoom = undefined;
        $scope.chats = [];
        socket.emit('getRooms',{});
    };
    $scope.sendChat = function(){
        socket.emit('chatClientToServer',{text:$scope.chatBox,mods:$scope.mods});
        history.push($scope.chatBox);
        historyId = history.length -1;
        $scope.distplayHistory = _.chain(history)
            .uniq()
            .takeRight(5)
            .reverse()
            .value();
        $scope.chatBox = '';
    };
    $scope.banUser = function(user_id){
      socket.emit('chatBanUser',{user_id:user_id})
    };

    $scope.keyHandle = function($event){
        var keyCode = $event.keyCode;
        switch (keyCode){
        case 38: //up
            if(historyId==-1){
                historyId=history.length-1;
            }else if(historyId!=0){
                historyId--;
            }
           $scope.chatBox = history[historyId];
            break;
        case 40: //down
            if(historyId==-1){
                historyId=historyId.length-1;
            }else if(historyId+1!=history.length){
                historyId++;
            }
            $scope.chatBox = history[historyId];
            break;
        default:
            return;
        }
    };

    $scope.menuAside = {
        title:"Settings"
    };

    $scope.addMod = function(modType){
        $scope.mods.push({
            name:modType.name,
            attributes: _.cloneDeep(modType.template)
        })
    };

    $scope.removeMod = function(mod){
        _.pull($scope.mods,mod);
    };


    $scope.deleteRoom = function(room,$event){
        var roomId = room._id;
      socket.emit('deleteRoom',roomId);
        $event.stopPropagation();
        setTimeout(function(){
            socket.emit('getRooms',{})
        },200);
    };

    $scope.enterRoom = function(room,password){
        if(room.hasPassword){
            if(password){
                socket.emit('chatEnterRoom',{room:room,password:password});
                $scope.roompassword='';
                $scope.passwordModal.$promise.then($scope.passwordModal.hide);
            }else{
                $scope.passwordModal.$promise.then($scope.passwordModal.show);
                $scope.selectedRoom = room;
            }


        }
        else
            socket.emit('chatEnterRoom',{room:room});

    };

    $scope.hasUsername = function(chat){
        if($rootScope.logged_in_user)
            return chat.text.indexOf($rootScope.logged_in_user.username) != -1;
        else
            return false;
    };


    //settings
    $scope.showRank=$cookies.getObject('showRank');
    $scope.$watch('showRank',function(val){
        $cookies.put('showRank',val);
    });
    $scope.showTime=$cookies.getObject('showTime');
    $scope.$watch('showTime',function(val){
        $cookies.put('showTime',val);
    });
    $scope.showAlert=$cookies.getObject('showAlert');
    $scope.$watch('showAlert',function(val){
        $cookies.put('showAlert',val);
    });

    if($scope.showTime == undefined)
        $scope.showTime=true;

})
    .filter('startCase',function(){
        return function(input){
            return _.startCase(input);
        }
    }).directive('room',function(){
    return{
        templateUrl:'components/chat/roomIconTemplate.html'
    }
});

function strip(html)
{
    var tmp = document.createElement("DIV");
    tmp.innerHTML = html;
    return tmp.textContent || tmp.innerText || "";
}
function onBlur() {
    document.body.className = 'blurred';
}
function onFocus(){
    document.body.className = 'focused';
}

if (/*@cc_on!@*/false) { // check for Internet Explorer
    document.onfocusin = onFocus;
    document.onfocusout = onBlur;
} else {
    window.onfocus = onFocus;
    window.onblur = onBlur;
}

\public\index\components\chat\chatModMenuTemplate.html
<div>
    <div>
        <button ng-repeat="type in modTypes" ng-click="addMod(type)" class="btn btn-default">{{type.name | startCase}}</button>
    </div>
    <div ng-repeat="mod in mods">
        <h3>{{mod.name}} <button class="btn btn-danger pull-right" ng-click="removeMod(mod)"><span class="fa fa-times"></span></button></h3>
        <div ng-repeat="(key,value) in mod.attributes">
            <div class="form-group">
                <label>{{key | startCase}}:</label>
                <input ng-model="mod.attributes[key]" class="form-control">
            </div>
        </div>
    </div>
</div>

\public\index\components\chat\chatView.html
<div ng-hide="chatRoom!= undefined">
    <div class="col-md-2">
       <div>
           <h3>Room Bot filter</h3>
           <div class="btn-group btn-group-vertical">
               <label class="btn btn-default" ng-repeat="bot in bots"  bs-checkbox ng-model="roomFilter.bots[bot]" >{{bot}} </label>
           </div>
       </div>
    </div>
    <div class="col-md-9" >
        <div class="input-group">
            <span class="input-group-addon"><span class="fa fa-search"></span></span>
            <input ng-model="roomFilter.searchText" class="form-control">
        </div>
        <br>
        <div>
            <room ng-repeat="room in displayRooms">

            </room>
        </div>
    </div>
</div>

<div style="height: 70%; z-index: 2" id="topDiv" ng-show="chatRoom!= undefined" class="am-slide-right">
    <div class="row col-sm-12 col-md-11">
        <h1 class="col-md-offset-1">{{chatRoom.name}}</h1>
        <small class="col-md-offset-1">{{chatRoom.description}}</small>
    </div>
    <div class="col-md-1 hidden-sm hidden-xs pull-right">
        <h2>Bots</h2>
        <ul class="list-unstyled">
            <li ng-repeat=" bot in chatRoom.bots">{{bot.name}}</li>
        </ul>
        <br><br>
    </div>
    <div class="pull-left container-fluid">
        <a bs-aside="menuAside" data-content-template="components/chat/menuTemplate.html"  data-container="#chatArea" data-placement="left"  data-animation="am-fade-and-slide-left"><span bs-tooltip data-title="Settings" data-placement="right" class="fa fa-cog fa-3x"></span></a>
        <a bs-aside="{title:'Mods'}" data-title="Mods" data-content-template="components/chat/chatModMenuTemplate.html"  data-container="#topDiv" data-placement="left"  data-animation="am-fade-and-slide-left"><span bs-tooltip data-title="Mods" data-placement="right" class="fa fa-cog fa-3x"></span></a>
        <br class="hidden-sm hidden-xs"/>
        <br class="hidden-sm hidden-xs"/>
        <a ng-click="exitRoom()"><span class="fa fa-arrow-circle-left fa-3x"></span></a>
        <a ng-click="chats=[]"><span bs-tooltip data-title="Clear Chat" data-placement="right" class="fa fa-3x fa-trash"></span></a>
    </div>

    <div class="col-sm-12 col-md-10 pull-left remove-padding" style="height:550px">

        <div id='chatArea' style="overflow:auto;height:100%;width:100%" scroll-glue>
            <p ng-repeat="chat in chats" ng-class="{'chat-has-username':hasUsername(chat)}" class="chat">
                <span ng-show="hasPermission('Chat Admin')&&chat.user" ><a class="fa fa-ban text-danger" ng-click="banUser(chat.user)"></a></span>
                <small ng-show="showRank && chat.rank">[{{chat.rank}}]</small>
                <b ng-show="chat.username"><a ui-sref="userPage({userId:chat.user})" >{{chat.username}}</a>:</b>
                <span ng-bind-html="chat.text"></span>
                <small class="chat_time pull-right" ng-show="showTime">{{chat.time | date:'mediumTime'}}</small>
            </p>
            <p id='typing' style="position:absolute;bottom:0px;">{{typing}}</p>
        </div>
        <br><br>
        <form >
            <div ng-show="logged_in_user">
                <div class='input-group'>
                    <input class="form-control" ng-model='chatBox'  id='chatBox' ng-keydown="keyHandle($event)">
                    <div class="input-group-btn">

                        <button class="btn btn-primary " id="chatButton" ng-click="sendChat()">send</button>
                        <button class="btn btn-primary dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></button>
                        <ul class="dropdown-menu" role="menu">
                            <li ng-repeat="item in distplayHistory" ><a ng-click="$parent.chatBox = item">{{item}}</a></li>

                        </ul>
                    </div>

                </div>
            </div>
        </form>

    </div>

</div>





\public\index\components\chat\menuTemplate.html
<p>Show Time <switch class="green" ng-model="$parent.$parent.$parent.showTime"></switch></p>
<p>Show Rank <switch class="green" ng-model="$parent.$parent.$parent.showRank"></switch></p>
<p>Popup alerts <switch class="green" ng-model="$parent.$parent.$parent.showAlert"></switch></p>


\public\index\components\chat\passwordModalTemplate.html
<div class="modal" tabindex="-1">
    <div class="modal-dialog modal-sm">
       <div class="modal-content">
           <div class="modal-header">
               <p>{{selectedRoom.name}} Room Password</p>
           </div>
           <div class="modal-body">
               <form ng-submit="enterRoom(selectedRoom,roomPassword)">
                   <div class="input-group">
                       <input ng-model="roomPassword" placeholder="Password" class="form-control">
                       <div class="input-group-btn">
                           <button class="btn btn-success">Go!</button>
                       </div>
                   </div>
               </form>
           </div>
           <div class="modal-footer"></div>
       </div>
    </div>
</div>

\public\index\components\chat\roomIconTemplate.html
<div class="col-md-3 col-lg-2 well clearfix" ng-click="enterRoom(room);showPassword = true">
    <b>{{room.name | limitTo:15}}<span ng-if="room.name.length>15">...</span></b>
    <br>
    <small>{{room.description }}</small>
    <p ng-show="room.requirements && room.requirements.rank" class="text-danger" style="position:absolute">{{room.requirements.rank}} only*</p><br>
    <button ng-click='deleteRoom(room,$event)' class="btn btn-danger" ng-show="hasPermission('Room Admin') && (room.deletable||hasPermission('god'))"><span class='fa fa-remove'></span> Delete</button>

</div>

\public\index\components\forum\createThreadView.html
<div class="col-md-10 col-md-offset-1">
    <form ng-submit="save()">
        <div class="form-group">
            <label>Thread Title</label>
            <input class="form-control" ng-model="newThread.title">
        </div>
        <div class="form-group">
            <label>Post</label>
            <textarea class="forumTextArea" ng-model="newPost.body"></textarea>
        </div>
        <div class="form-group">
            <label>Tags</label>
            <input class="form-control" ng-model="newThread.tags">
        </div>
        <div class="form-group" ng-if="hasPermission('Forum Admin')">
            <button type="button" bs-checkbox class="btn btn-default" ng-model="newThread.pinned">Pinned Thread</button>
        </div>
        <div class="form-group" ng-if="hasPermission('Forum Admin')">
            <button type="button" bs-checkbox class="btn btn-default" ng-model="newThread.locked">Locked Thread</button>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>

\public\index\components\forum\createTopicView.html
<div class="col-md-offset-1 col-md-10">
    <form ng-submit="save()">
        <div class="form-group">
            <label>Topic name:</label>
            <input class="form-control" ng-model="newTopic.name">
        </div>
        <div class="form-group">
            <label>Topic description:</label>
            <input class="form-control" ng-model="newTopic.description">
        </div>
        <div class="form-group">
            <label>Topic icon:</label>
            <small>This will appear on the left side of the topic name to add flare. <a href="https://fortawesome.github.io/Font-Awesome/icons/" target="_blank">Font Awesome</a> icons are being used. Simply the icon name "fa" and "fa-*" will already be added</small>
            <input class="form-control" ng-model="newTopic.icon">
        </div>
        <label>Icon Style</label>
        <button type="button" class="btn btn-default" ng-model="newTopic.iconStyle" bs-options="style as style for style in iconStyles" bs-select></button>
        <br>
        <button class="btn btn-primary">Submit</button>
    </form>
</div>

\public\index\components\forum\forumController.js
/**
 * Created by alexthomas on 5/5/16.
 */
angular.module('controllers').controller('forumController',function($scope,$http,$rootScope,$stateParams,$state){
    $scope.topics = [];

    if($stateParams.topicId){
        $scope.pageLoading = true;
        var pageSize = $stateParams.limit||15;
        var page=0;
        $http.get('/api/forum/topics/'+$stateParams.topicId)
            .success(function(data){
                var topic = data;
                    $http.get('/api/forum/topics/'+topic._id+'/children')
                        .success(function(data){
                            $scope.pageLoading = false;
                            topic.children = data;
                            $scope.topic = topic;
                            $scope.topics.push(topic);
                        })
            });
        $scope.getNextPage= function(){
            $scope.pageLoading = true;
            page++;
            $http.get('/api/forum/topics/'+$stateParams.topicId+'/children'+'?limit='+pageSize+'&skip='+(page*pageSize))
                .success(function(data){
                    $scope.pageLoading = false;
                    if(_.isEmpty(data.threads))
                        $scope.atBottomOfTopic=true;
                    data.threads.forEach(function(thread){

                        $scope.topic.children.threads.push(thread);
                    });

                });
        };
    }else if($stateParams.parent){
        $scope.iconStyles = ['primary','danger','info','success','warning','default','muted'];
        $scope.newTopic = {parent:$stateParams.parent};
        $http.get('/api/forum/topics/'+$stateParams.parent)
            .success(function(data){$scope.parent=data});

        $scope.save = function(){
            $http.post('/api/forum/topics',$scope.newTopic)
                .success(function(){
                    $state.go('forum');
                })
        }
    }
    else{
        $http.get('/api/forum/topics')
            .success(function(data){
                _.forEach(data,function(topic){
                    $http.get('/api/forum/topics/'+topic._id+'/children')
                        .success(function(data){
                            topic.children = data;
                            $scope.topics.push(topic);
                        })
                });
            })
    }




});

\public\index\components\forum\forumView.html
<div class="col-md-10 col-md-offset-1 input-group">
    <input class="form-control" ng-model="forumSearch">
    <span class="input-group-btn">
         <button class="btn btn-primary " ui-sref="forumTagSearch({tags:forumSearch})">Search</button>
    </span>


</div>
<div class="col-md-10 col-md-offset-1">
    <h1>{{header}}</h1>
    <table class="table forum table-striped" ng-repeat="topic in topics | orderBy:'name'" ng-hide="topic.children.topics.length==0&&!hasPermission('Forum Admin')">
        <thead>
            <tr>
                <th class="cell-stat"></th>
                <th><h3>{{topic.name}} <button ui-sref="createTopic({parent:topic._id})" class="btn-sm btn btn-primary" ng-show="hasPermission('Forum Admin')"><span class="fa fa-plus-square-o"></span> New Topic</button></h3></th>
                <th class="cell-stat">Topics</th>
                <th class="cell-stat">Threads</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="childTopic in topic.children.topics|orderBy:'name'">
                <td class="text-center"><i ng-if="childTopic.icon" ng-class="'fa-'+childTopic.icon+' text-'+childTopic.iconStyle" class="fa"></i></td>
                <td><h4><a ui-sref="topic({topicId:childTopic._id})">{{childTopic.name}}</a></h4><small>{{childTopic.description}}</small></td>
                <td>{{childTopic.topicCount}}</td>
                <td>{{childTopic.threadCount}}</td>
            </tr>

        </tbody>
    </table>
    <table ng-if="topic" class="table table-striped forum" infinite-scroll="getNextPage()" infinite-scroll-distance="1" infinite-scroll-disabled="pageLoading||atBottomOfTopic">
        <thead>
        <th class="cell-stat"></th>
        <th><button ui-sref="createThread({topicId:topic._id})" class="btn-sm btn btn-primary" ng-show="logged_in_user"><span class="fa fa-plus-square-o"></span> New Thread</button></th>
        <th class="cell-stat"> Views</th>
        <th class="cell-stat"> Posts</th>
        <th class="cell-stat-2x">Created by</th>
        <th class="cell-stat-2x"> Created</th>
        <th class="cell-stat-2x"> Modified</th>
        </thead>
        <tbody>
        <tr ng-repeat="childThread in topic.children.threads" ui-sref="thread({threadId:childThread._id})">
            <td class="cell-stat"><i ng-if="childThread.pinned " class="fa fa-thumb-tack text-danger"></i>&nbsp<i ng-if="childThread.locked " class="fa fa-lock text-primary"></i></td>
            <td><a ui-sref="thread({threadId:childThread._id})">{{childThread.title}}</a></td>
            <td class="cell-stat">{{childThread.views}}</td>
            <td class="cell-stat">{{childThread.postCount}}</td>
            <td>{{childThread.creator.username}}</td>
            <td class="" bs-tooltip data-title="{{childThread.creationTime| date:'medium'}}" data-container="body"><small><i class="fa fa-clock-o"></i>&nbsp{{childThread.creationTime|timeAgo}}</small></td>
            <td class="" bs-tooltip data-title="{{childThread.lastUpdateTime| date:'medium'}}" data-container="body"><small ng-if="childThread.lastUpdateTime!==childThread.creationTime"><i class="fa fa-clock-o"></i>&nbsp{{childThread.lastUpdateTime|timeAgo}}</small></td>
        </tr>
        </tbody>
    </table>
</div>

\public\index\components\forum\postController.js
/**
 * Created by alexthomas on 5/6/16.
 */
angular.module('controllers').controller('postController',function($scope,$http,$rootScope,$stateParams,$state){

    function update(){
        $http.get('/api/forum/posts/'+$stateParams.postId).success(function(data){
            $scope.post = data;
        }).error(function(err){
            $scope.err =err;
        });
    }
    update();
    $scope.save =function(){
        $http.patch('/api/forum/posts/'+$scope.postEditing._id,{body:$scope.postEditing.body})
            .success(function(){
                update();
                $scope.postEditing=undefined;
            }).error(function(err){
            $scope.err =err;
        });
    };
    $scope.delete = function(){
        $http.delete('/api/forum/posts/'+$stateParams.postId)
            .success(function(){
                $state.go('forum');
            }).error(function(err){
            $scope.err =err;
        });
    };
    $scope.edit = function(post){
        $scope.postEditing = _.cloneDeep(post);
    };
    $scope.getHTMLMarkdown=function(post){
        return markdown.toHTML(post.body);
    }
}) .directive('forumPost',function(){
    return{
        templateUrl:'components/forum/postDirective.html'
    }

});


\public\index\components\forum\postDirective.html
<div>
    <p>
        <a ng-class="{'creator':post.creator._id==thread.creator._id}" ui-sref="userPage({userId:post.creator._id})" class="post-user">{{post.creator.username}}</a>
        <span class="post-role"><span ng-if="post.creator.group.name.indexOf('Admin')>-1" class="fa fa-shield"></span>&nbsp{{post.creator.group.name}}</span>
        <small class="pull-right" bs-tooltip data-title="{{post.lastUpdateTime| date:'medium'}}">{{post.lastUpdateTime===post.creationTime?'posted':'last edited'}}&nbsp{{post.lastUpdateTime|timeAgo}}</small>

    </p>
    <div ng-hide="post._id&&postEditing._id==post._id" ng-bind-html="getHTMLMarkdown(post)">

    </div>
    <div ng-show="post._id&&postEditing._id==post._id" class="clearfix">
        <span class="fa fa-times text-danger pull-right fa-2x" ng-click="$parent.postEditing =undefined"></span>
        <div>
            <textarea class="forumTextArea" ng-model="postEditing.body" rows="5"></textarea>
        </div>

        <button class="btn btn-primary pull-right" ng-click="save()"><span class="fa fa-floppy-o"></span>&nbspSave</button>
    </div>
    <div ng-hide="post._id&&postEditing._id==post._id" ng-if="post.replies&&post.replies.length>=1">
        <blockquote>
            <div ng-repeat="post in post.replies">
                <forum-post class="clearfix subpost"></forum-post>
                <hr>
            </div>

        </blockquote>
    </div>
    <div class="pull-right clearfix" ng-if="post._id">
        <div class="pull-right clearfix forum-post-button-group">
            <a ui-sref="forumPost({postId:post._id})" ng-if="post._id"><span><span class="fa fa-link fa-lg" bs-tooltip data-title="Permanent link to post" data-type="info" data-placement="bottom"></span></span></a>
            <a ng-if="post._id && logged_in_user"  ng-click="startReply(post)"><span class="fa fa-reply" bs-tooltip data-title="Reply to post" data-type="success" data-placement="bottom"></span></a>
            <a ng-click="edit(post)" ><span ng-if="logged_in_user && post.creator._id==logged_in_user._id"><span class="fa fa-pencil fa-lg" bs-tooltip data-title="Edit Post" data-type="info" data-placement="bottom"></span></span></a>
            <a ng-click="delete(post)" ><span  ng-if="logged_in_user && post.creator._id==logged_in_user._id">&nbsp<span class="fa fa-trash fa-lg" bs-tooltip data-title="Delete Post" data-type="danger" data-placement="bottom"></span></span></a>
        </div>
    </div>
</div>

\public\index\components\forum\postView.html
<div class="col-md-offset-1 col-md-10">
    <div ng-show="err" class="alert alert-danger">
        <p>{{err}}</p>
    </div>
    <div ng-show="post">
        <a ui-sref="thread({threadId:post.thread})" class="pull-right"><h4>Go to thread</h4></a>
        <br><br>
        <forum-post></forum-post>
    </div>

</div>

\public\index\components\forum\searchController.js
/**
 * Created by Sonicdeadlock on 5/9/2016.
 */
angular.module('controllers').controller('forumSearchController',function($scope,$http,$rootScope,$stateParams,$state){
    var pageSize = $stateParams.limit||15;
    var page=0;
    $scope.topic={children:{threads:[]}};
    $scope.getNextPage= function(){
        $scope.pageLoading = true;
        if($stateParams.tag){
            $scope.header = '#'+$stateParams.tag;
            $http.get('/api/forum/search/tag/'+$stateParams.tag+''+'?limit='+pageSize+'&skip='+(page*pageSize))
                .success(function(data){
                    $scope.pageLoading = false;
                    if(_.isEmpty(data))
                        $scope.atBottomOfTopic=true;
                    data.forEach(function(thread){
                        $scope.topic.children.threads.push(thread);
                    });

                });
        }
        if($stateParams.tags){
            if(_.isString($stateParams.tags))
            $stateParams.tags = _.map($stateParams.tags.split(' '),function(tag){
                if(tag.startsWith('#'))
                return tag.substr(1);
                else
                return tag;
            });
            $scope.header = '#'+$stateParams.tags.join(' #');
            $http.post('/api/forum/search/tags/'+'?limit='+pageSize+'&skip='+(page*pageSize),{tags:$stateParams.tags})
                .success(function(data){
                    $scope.pageLoading = false;
                    if(_.isEmpty(data))
                        $scope.atBottomOfTopic=true;
                    data.forEach(function(thread){
                        $scope.topic.children.threads.push(thread);
                    });

                });
        }
        page++;
    };
});

\public\index\components\forum\threadController.js
/**
 * Created by alexthomas on 5/5/16.
 */
angular.module('controllers').controller('threadController',function($scope,$http,$rootScope,$stateParams,$state){
    var pageSize = $stateParams.limit||15;
    var page=0;
    $scope.errs = [];
    $scope.replyText='';
    if($stateParams.threadId){
        $scope.pageLoading=true;
        $http.patch('/api/forum/threads/'+$stateParams.threadId+'/view');
        function update(){
            $http.get('/api/forum/threads/'+$stateParams.threadId+'?limit='+pageSize)
                .success(function(data){
                    page=0;
                    $scope.atBottomOfThread=false;
                    $scope.pageLoading=false;
                    data.history.forEach(function(event){
                       data.posts.push({htmlBody:event.actor.username+" "+event.action+'ed this post at '+event.date,creationTime:event.date,lastUpdateTime:event.date})
                    });
                    $scope.thread = data;

                }).error(function(err){$scope.errs.push(err);$scope.pageLoading=false;$scope.atBottomOfThread=true;});
        }
        update();
        $scope.save =function(){
            $http.patch('/api/forum/posts/'+$scope.postEditing._id,{body:$scope.postEditing.body})
                .success(function(){
                    update();
                    $scope.postEditing=undefined;
                }).error(function(err){$scope.errs.push(err)});
        };
        $scope.deleteThread = function(){
            $http.delete('/api/forum/threads/'+$stateParams.threadId)
                .success(function(){
                    $state.go('forum');
                })
        };
    }
    else{
        $scope.newThread = {topic:$stateParams.topicId};
        $scope.newPost = {};
        $scope.save = function(){
            $http.post('/api/forum/threads',$scope.newThread)
                .success(function(data){
                    $scope.newPost.thread = data._id;
                    $http.post('/api/forum/posts',$scope.newPost)
                        .success(function(){
                            window.location.href='/#/forum/thread/'+data._id;
                        }).error(function(err){$scope.errs.push(err)});
                }).error(function(err){$scope.errs.push(err)});
        }
    }
    $scope.reply = function(){
        $http.post('/api/forum/posts'+(($scope.replyPost)?('/'+$scope.replyPost._id+'/reply'):''),{
            body:$scope.replyText,
            thread:$scope.thread._id
        })
            .success(function(){
                $scope.replyText='';
                $scope.replyPost = undefined;
                update();
            }).error(function(err){$scope.errs.push(err)});
    };
    $scope.delete = function(post){
        $http.delete('/api/forum/posts/'+post._id)
            .success(update).error(function(err){$scope.errs.push(err)});
    };
    $scope.getNextPage= function(){
      $scope.pageLoading = true;
        page++;
        $http.get('/api/forum/threads/'+$stateParams.threadId+'?limit='+pageSize+'&skip='+(page*pageSize))
            .success(function(data){
                $scope.pageLoading = false;
                if(_.isEmpty(data.posts))
                $scope.atBottomOfThread=true;
               data.posts.forEach(function(post){
                   if(post.body){
                       $scope.thread.posts.push(post);
                   }

               });

            }).error(function(err){$scope.errs.push(err);$scope.pageLoading=false;$scope.atBottomOfThread=true;});
    };


    $scope.edit = function(post){
        $scope.postEditing = _.cloneDeep(post);
    };

    $scope.pin = function(){
        $http.patch('/api/forum/threads/'+$stateParams.threadId+'/pin').success(update).error(function(err){$scope.errs.push(err)});
    };
    $scope.unpin = function(){
        $http.patch('/api/forum/threads/'+$stateParams.threadId+'/unpin').success(update).error(function(err){$scope.errs.push(err)});
    };
    $scope.lock = function(){
        $http.patch('/api/forum/threads/'+$stateParams.threadId+'/lock').success(update).error(function(err){$scope.errs.push(err)});
    };
    $scope.unlock = function(){
        $http.patch('/api/forum/threads/'+$stateParams.threadId+'/unlock').success(update).error(function(err){$scope.errs.push(err)});
    };

    $scope.addTextToReply = function (text) {
        $scope.replyText+=text;
    };

    $scope.startReply = function(post){
        $('html, body').animate({
            scrollTop: $("#main-reply-panel").offset().top
        }, 700);
        $("#main-reply-panel textarea").focus();
        $scope.replyPost = post;
    };

    $scope.getHTMLMarkdown=function(post){
        if(post.body)
        return markdown.toHTML(post.body);
        else
        return post.htmlBody;
    }
});

$(document).delegate('textarea', 'keydown', function(e) {
    var keyCode = e.keyCode || e.which;

    if (keyCode == 9) {
        e.preventDefault();
        var start = $(this).get(0).selectionStart;
        var end = $(this).get(0).selectionEnd;

        // set textarea value to: text before caret + tab + text after caret
        $(this).val($(this).val().substring(0, start)
            + $(this).val().substring(end));

        // put caret at right position again
        $(this).get(0).selectionStart =
            $(this).get(0).selectionEnd = start + 1;
    }
});

\public\index\components\forum\threadView.html
<div class="col-md-10 col-md-offset-1">
    <div ng-repeat="err in errs">
        <p class="alert alert-danger">{{err}}</p>
    </div>
    <h2><i ng-if="thread.pinned " class="fa fa-thumb-tack text-danger"></i>&nbsp<i ng-if="thread.locked " class="fa fa-lock text-primary"></i>&nbsp{{thread.title}}&nbsp
        <button ng-click="deleteThread()" class="btn btn-danger" ng-if="logged_in_user._id==thread.creator._id||hasPermission('Forum Admin')">Delete Thread</button>
        <button ng-click="pin()" class="btn btn-primary" ng-show="!thread.pinned && hasPermission('Forum Admin')">Pin Thread</button>
        <button ng-click="unpin()" class="btn btn-primary" ng-show="thread.pinned && hasPermission('Forum Admin')">Unpin Thread</button>
        <button ng-click="lock()" class="btn btn-primary" ng-show="!thread.locked && hasPermission('Forum Admin')">Lock Thread</button>
        <button ng-click="unlock()" class="btn btn-primary" ng-show="thread.locked && hasPermission('Forum Admin')">Unlock Thread</button>
    </h2><br>
    <small ng-repeat="tag in thread.tags"><a ui-sref="forumTagSearch({tag:tag})">#{{tag}}&nbsp</a></small>
    <hr>
    <div infinite-scroll="getNextPage()" infinite-scroll-distance="1" infinite-scroll-disabled="pageLoading||atBottomOfThread">
        <div ng-repeat="post in thread.posts |orderBy:'creationTime'" class="clearfix" ng-if="!post.replyTo">
            <forum-post ></forum-post>
            <br>
            <hr>
        </div>
        <div style="text-align: center"><p ng-show="pageLoading" class="fa fa-spin fa-circle-o-notch fa-3x"  ></p></div>

    </div>

    <div class="reply-panel clearfix" ng-show="logged_in_user && thread&&!(thread.locked&&!hasPermission('Forum Admin'))" id="main-reply-panel">
        <b class="text-info" ng-show="replyPost">Replying to {{replyPost.creator.username}}</b>
        <div>
            <div class="textarea-addon well-sm well">
                <a><span class="fa fa-link fa-lg" ng-click="addTextToReply(' [Link text](link url) ')"></span></a>
                <a><span class="fa fa-picture-o fa-lg" ng-click="addTextToReply(' ![alt text](image url) ')"></span></a>
                <a><span class="fa fa-header fa-lg" ng-click="addTextToReply(' \r###heading ')"></span></a>
                <a><span class="fa fa-bold fa-lg" ng-click="addTextToReply(' __Bold text__ ')"></span></a>
                <a><span class="fa fa-italic fa-lg" ng-click="addTextToReply(' _italic text_ ')"></span></a>
                <a><span class="fa fa-list-ol fa-lg" ng-click="addTextToReply(' \r1. item\r2. item\r3. item ')"></span></a>
                <a><span class="fa fa-list-ul fa-lg" ng-click="addTextToReply(' \r* item\r* item\r* item ')"></span></a>
                <a><span class="fa fa-code fa-lg" ng-click="addTextToReply(' `code`')"></span></a>
            </div>
            <textarea class="forumTextArea form-control" ng-model="replyText" rows="5"></textarea>
        </div>
        <br>
        <button class="btn btn-primary pull-right" ng-click="reply()"><span class="fa fa-reply"></span>&nbspReply</button>
    </div>
</div>

\public\index\components\hangman\hangmanSetWordController.js
/**
 * Created by alexthomas on 4/14/16.
 */
angular.module('controllers').controller('hangmanSetWordController',function($scope,$http,$state,$stateParams){
    $scope.set=function(){
        $http.post('/api/hangman/set',{
            word:$scope.word,
            token:$stateParams.token
        }).success(function(){
            $scope.success = true;
            $scope.error = false;
        })
            .error(function(data){
                $scope.error = data;
                $scope.success = false;
            })
    }
});

\public\index\components\hangman\hangmanSetWordView.html
<div class="container">
    <h1>Set Hangman Word</h1>
    <div class="alert alert-danger" ng-show="error"><p>{{error}}</p></div>
    <div class="alert alert-success" ng-show="success"><p>Word set success!</p></div>
    <div class="input-group">
        <input placeholder="Word" class="form-control" ng-model="word">
        <span class="input-group-btn">
            <button class="btn btn-primary " ng-click="set()">Set</button>
        </span>

    </div>
</div>

\public\index\components\home\homeController.js
/**
 * Created by alexthomas on 1/19/16.
 */
angular.module('controllers').controller('homeController',function($scope,$http,$state){
    var page_size = 10;
    $http.get('/api/update_notes?limit='+page_size).success(function(data){
        $scope.update_notes = data;
    });
    $http.get('/api/update_notes/count').success(function(data){
        $scope.note_count = data;
        $scope.pages = _.times(Math.ceil(data/page_size),Number);

    });

    $scope.page = function(page){
        $http.get('/api/update_notes?limit='+page_size+'&skip='+page_size*page).success(function(data){
            $scope.update_notes = data;
        });
    };

    $scope.currentPage = 0;

});

\public\index\components\home\homeView.html
<div class="col-md-10 col-md-offset-1">
    <div class="jumbotron"><h1></h1></div>
    <div ng-repeat="update_note in update_notes">
        <div class="col-md-2">
            <p>{{update_note.user.username}}</p>
            <small class="label label-default">{{update_note.user.group.name}}</small>
        </div>
        <div class="col-md-10">
            <h2>{{update_note.title}}</h2>
            <small>{{update_note.release_time | date:'medium'}}</small>
            <br>
            <div ng-bind-html="update_note.content">
            </div>
        </div>
        <hr>
    </div>
    <div>
    <ul class="pagination" ng-if="pages">
        <li ng-class="{disabled:currentPage<1}">
            <a  ng-click="page(currentPage-1)">
                <span aria-hidden="true">&laquo;</span>
            </a>


        </li>
        <li ng-repeat="p in pages" ng-class="{active:p==currentPage}"><a ng-click="page(p)">{{p+1}}</a></li>
        <li ng-class="{disabled:currentPage>=pages.length-1}">
            <a  ng-click="page(currentPage+1)">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>

    </ul>
    </div>
</div>

\public\index\components\messages\composeController.js
/**
 * Created by alexthomas on 1/3/16.
 */
 angular.module('controllers').controller('composeController',function($scope,$http,$state,$rootScope,$stateParams){
 	if($stateParams.userId){
 		$http.post('/api/users/getUser',{_id:$stateParams.userId}).success(function(data){
 			$scope.user = {username:data.username,id:$stateParams.userId}
 		});
 	}
	 if($stateParams.messageId){
         $scope.loadingPrecursor =true;
		 $http.get('/api/messages/'+$stateParams.messageId).success(function(data){
             $scope.loadingPrecursor =false;
			 var user = data[$stateParams.from=='true'?'toUser':'fromUser'];
			 $scope.user = {username:user.username,id:user._id};
			 $scope.replyBody = '\r'+data.body;
             if(data.replyBody)
                $scope.replyBody+='\r***\r'+data.replyBody;
			 $scope.title ='RE:'+data.title;
		 });
	 }
 	$scope.usernames = [];
 	$http.get('/api/messages/mine').success(function(data){
 		var sent = data.sent;
 		var received = data.received;
		$scope.usernames= _.chain(sent).map(function(sentMsg){
			return {username:sentMsg.toUser.username,id:sentMsg.toUser._id};
		}).concat(
			_.map(received,function(receivedMsg){
				return {username:receivedMsg.fromUser.username,id:receivedMsg.fromUser._id};
			})
		)
			.uniqBy('id').value();


 	});
 	$scope.send = function(){
        if(!$scope.loadingPrecursor){
            if($scope.user && $scope.user.id){
                $http.post('/api/messages',{toUser:$scope.user.id,body:$scope.body,title:$scope.title,replyBody:$scope.replyBody}).success(function(){
                    $rootScope.updateInboxCount();
                    $state.go('inbox');
                });
            }else{
                $http.post('/api/users/getUser',{username:$scope.user}).success(function(data){
                    $http.post('/api/messages',{toUser:data._id,body:$scope.body,title:$scope.title,replyBody:$scope.replyBody}).success(function(){
                        $state.go('inbox');
                    });
                });
            }
        }


 	};
    $scope.body ='';
     $scope.addTextToBody = function (text) {
         $scope.body+=text;
     }
 });

$(document).delegate('textarea', 'keydown', function(e) {
	var keyCode = e.keyCode || e.which;

	if (keyCode == 9) {
		e.preventDefault();
		var start = $(this).get(0).selectionStart;
		var end = $(this).get(0).selectionEnd;

		// set textarea value to: text before caret + tab + text after caret
		$(this).val($(this).val().substring(0, start)
			+ "\t"
			+ $(this).val().substring(end));

		// put caret at right position again
		$(this).get(0).selectionStart =
			$(this).get(0).selectionEnd = start + 1;
	}
});


\public\index\components\messages\composeView.html
<div>
	<div class="panel panel-default col-md-offset-3 col-md-6 col-sm-12">
		<div class="panel-body">
		<form autocomplete='false'>
				<div class="form-group">
					<label>Username </label>
					<input class="form-control" type="text" placeholder="Username" ng-model='user' bs-typeahead bs-options="u as u.username for u in usernames">
				</div>
				<div class="form-group">
					<label>Title </label>
					<input class="form-control" type="text" placeholder="Title" ng-model='title'>
				</div>
				<div class="form-group">
					<label>Message</label>
					<div>
						<div class="textarea-addon well-sm well">
							<a><span class="fa fa-link fa-lg" ng-click="addTextToBody(' [Link text](link url) ')"></span></a>
							<a><span class="fa fa-picture-o fa-lg" ng-click="addTextToBody(' ![alt text](image url) ')"></span></a>
							<a><span class="fa fa-header fa-lg" ng-click="addTextToBody(' \r###heading ')"></span></a>
							<a><span class="fa fa-bold fa-lg" ng-click="addTextToBody(' __Bold text__ ')"></span></a>
							<a><span class="fa fa-italic fa-lg" ng-click="addTextToBody(' _italic text_ ')"></span></a>
							<a><span class="fa fa-list-ol fa-lg" ng-click="addTextToBody(' \r1. item\r2. item\r3. item ')"></span></a>
							<a><span class="fa fa-list-ul fa-lg" ng-click="addTextToBody(' \r* item\r* item\r* item ')"></span></a>
							<a><span class="fa fa-code fa-lg" ng-click="addTextToBody(' `code`')"></span></a>
						</div>
						<textarea class="forumTextArea form-control" ng-model="body" rows="5"></textarea>
					</div>
				</div>
				<button  class="btn btn-primary pull-right" ng-click="send();" ng-class="{'disabled':loadingPrecursor}">Send</button>

		</form>
		</div>

	</div>
</div>

\public\index\components\messages\inboxController.js
/**
 * Created by alexthomas on 1/2/16.
 */
angular.module('controllers').controller('inboxController',function($scope,$http,$state,$rootScope,$stateParams){

    function updateMessages(){
        $http.get('/api/messages/mine').success(function(data){
            $scope.sent = data.sent;
            $scope.received = data.received;

            $rootScope.updateInboxCount();
        });
    }
    updateMessages();
    setInterval(updateMessages,60*1000);
    $scope.showSent = false;
    $scope.showReceived = true;
    $scope.toggleView = function(activeView){
        $scope.activeMessage = undefined;
        if(activeView=='sent'){
            $scope.showSent = true;
            $scope.showReceived = false;
        }
        else if(activeView == 'received'){
            $scope.showSent = false;
            $scope.showReceived = true;
        }
    };
    $scope.setActiveMessage = function(message){
        $state.transitionTo('inbox', {id: message._id}, { notify: false });
        $http.get('/api/messages/'+message._id).success(function(data){
            data.body =  markdown.toHTML(data.body);
            if(data.replyBody)
            data.replyBody =  markdown.toHTML(data.replyBody);
            $scope.activeMessage = data;
        });
        if($scope.showReceived)
            $http.post('/api/messages/mark',{id:message._id}).success(updateMessages);
    };
    if($stateParams.id){
        $scope.setActiveMessage({_id:$stateParams.id});
    }
    $scope.delete = function(message,$event){
        if($event)
            $event.stopPropagation();
        $http.delete('/api/messages/'+message._id).success(function(){
            $scope.activeMessage = undefined;
                updateMessages();
            });
    }

});


\public\index\components\messages\inboxView.html
<div class="col-md-11">
    <div class="panel panel-default col-md-2 col-sm-4" id="sidePanel">
        <br>
        <ul class="nav nav-pills nav-stacked"> <!-- Select sent received  -->
            <li ng-class="{active:showReceived}"><a ng-click="toggleView('received')" >Received <span class="badge">{{received.length}}</span></a></li>
            <li ng-class="{active:showSent}"><a ng-click="toggleView('sent')">Sent <span class="badge">{{sent.length}}</span></a></li>
        </ul>
        <br>
        <button type="button" class="btn btn-primary" ui-sref="compose">Compose <span class="fa fa-pencil-square-o"></span></button>
        <br/>
        <br/>
        <div class="input-group"> <!-- search -->
            <div class="input-group-addon"><span class='fa fa-search'></span></div>
            <input type="text" class="form-control"  placeholder="Search" ng-model='searchText'>
        </div>
        <br/>
    </div>

    <div class="col-md-10 col-sm-8" ng-hide="activeMessage" style="max-height: 500px;overflow-y: auto;">
        <ul class="list-group message-list" ng-show="showSent" > <!-- list of sent -->
            <li class="list-group-item" ng-repeat="message in sent | orderBy:'-time' | filter:searchText" ng-class="{selected:message._id==activeMessage._id}" ng-click="setActiveMessage(message);">
                <b>{{message.title}}</b>
                <br/>
                <p>{{message.toUser.username}}</p>
                <small>{{message.time | date:"medium"}}</small>
            </li>
        </ul>

        <ul class="list-group message-list" ng-show="showReceived"> <!-- list of received -->
            <li class="list-group-item" ng-repeat="message in received | orderBy:'-time' | filter:searchText" ng-class="{selected:message._id==activeMessage._id}" ng-click="setActiveMessage(message);">
                <b ng-if="!message.read">{{message.title}}</b>
                <span ng-if="message.read">{{message.title}}</span>
                <br/>
                <p>{{message.fromUser.username}}</p>
                <small>{{message.time | date:"medium"}}</small>
                <a ng-click="delete(message,$event)"><span class="fa fa-trash fa-2x text-danger pull-right"></span></a>
            </li>
        </ul>
    </div>
<div class="panel panel-default col-md-10 col-sm-8" ng-if="activeMessage">
    <div class=" panel-body">
        <div class="container-fluid pull-right">
            <a ng-click="delete(activeMessage)"><span class="fa fa-trash fa-2x text-danger"></span></a>
            <a ui-sref='compose({messageId:activeMessage._id,from:showSent})'><span class="fa fa-reply fa-2x"></span></a>
        </div>
        <h2 class="pull-left">{{activeMessage.title}}</h2>
    </div>

    <br/>
    <p><b>{{showSent?"To":"From"}}:</b> <a ui-sref="userPage({userId:showSent?activeMessage.toUser._id:activeMessage.fromUser._id})">{{showSent?activeMessage.toUser.username:activeMessage.fromUser.username}}</a></p>
    <p ng-bind-html="activeMessage.body"></p>
    <hr ng-show="activeMessage.replyBody">
    <p ng-bind-html="activeMessage.replyBody"></p>
</div>
</div>

\public\index\components\navbar\navbarController.js
/**
 * Created by alexthomas on 1/19/16.
 */
angular.module('controllers').controller('navbarController',function($scope,$http,$rootScope,socket){
    $scope.logout = function(){
        $http.get('/auth/logout').success(function(){
            $rootScope.logged_in_user = undefined;
            if(socket)
                socket.disconnect();
        })
    }
});


\public\index\components\navbar\navbarView.html
<nav class="navbar navbar-inverse">
    <div class="navbar-header">
        <button class="navbar-toggle collapsed" data-target="#user-navbar-collapse-1" data-toggle="collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>

    </div>
    <div class="collapse navbar-collapse" id="user-navbar-collapse-1">
        <div class="container-fluid">
            <ul class="nav navbar-nav">
                <li ><a class="navbar-brand" ui-sref="home">Home</a></li>
                <li ng-if="hasPermission('ViewDemo')"><a href="/text">text</a></li>
                <li><a ui-sref="chat">Chat</a></li>
                <li><a ui-sref="forum">Forums</a></li>
                <li ng-if="hasPermission('User Admin')"><a href="/user">Users</a></li>
                <li ng-if="hasPermission('Admin')"><a href="/admin">Admin</a></li>
            </ul>
            <ul class="nav navbar-nav navbar-right">
                <li class="" ng-if="!logged_in_user"><a title="Login" data-template-url="user/components/login/loginDirective.html"   data-placement="bottom" data-animation="am-flip-x" data-container='body' bs-popover>Login</a></li>
                <li ng-if="!logged_in_user"><a href="/user#/register?next={{$state.$current.url.source}}">Register</a></li>
                <li class="" ng-if="logged_in_user"><a ng-click="logout()">Logout</a></li>
                <li class="" ng-if="logged_in_user" ui-sref="userPage({userId:logged_in_user._id})"><a>Welcome {{logged_in_user.firstName}}</a></li>
                <li ng-if="logged_in_user"><a ui-sref="inbox"><span class="fa fa-inbox"></span>&nbsp<span class="badge">{{inboxCount}}</span></a></li>
                <li ng-if="logged_in_user"><a ui-sref="compose"><span class="fa fa-pencil-square-o"></span></a></li>
            </ul>
        </div>
    </div>
</nav>

\public\index\components\user\userPageController.js
/**
 * Created by alexthomas on 12/12/15.
 */

angular.module('controllers').controller('userPageController',function($scope,$http,$state,$rootScope,$stateParams){
    $http.post('/api/users/getUser',{_id:$stateParams.userId}).success(function(data){
        $scope.userData = data;
        if(data.group){
            $http.get('/api/permissionGroups/'+data.group).success(function(data){
                $scope.userData.group = data[0];
            })
        }
    });
    $scope.userId = $stateParams.userId;
});


\public\index\components\user\userPageView.html
<div class="container-fluid">
    <div class="pull-right container-fluid">
        <button type="button" class="btn btn-primary" ui-sref="compose({userId:userData._id})">Compose <span class="fa fa-pencil-square-o"></span></button>
    </div>
    <h3>User</h3>
    <table class="table table-striped">
        <tr ng-if="userData.firstName">
            <td>First Name</td>
            <td>{{userData.firstName}}</td>
        </tr>
        <tr ng-if="userData.lastName">
            <td>Last Name</td>
            <td>{{userData.lastName}}</td>
        </tr>
        <tr ng-if="userData.username">
            <td>Username</td>
            <td>{{userData.username}}</td>
        </tr>
        <tr ng-if="userData.email">
            <td>Email</td>
            <td>{{userData.email}}</td>
        </tr>
    </table>
    <div ng-if="userData.strikes">
        <hr>
        <table class="table table-striped">
            <tr>
                <td>Banned Words Strikes</td>
                <td>{{userData.strikes.chat}}</td>
            </tr>
            <tr>
                <td>Bans</td>
                <td>{{userData.strikes.bans}}</td>
            </tr>
        </table>
    </div>
    <div ng-if="userData.group">
        <hr>
        <h3>Group</h3>
        <table class="table table-striped">
            <tr>
                <td>Group Name</td>
                <td>{{userData.group.name}}</td>
            </tr>
            <tr>
                <td>ID</td>
                <td>{{userData.group._id}}</td>
            </tr>
            <tr>
                <td>Default Group</td>
                <td>{{userData.group.default}}</td>
            </tr>
            <tr>
                <td>Has Access to User data </td>
                <td>
                    <ul>
                        <li ng-repeat="access in userData.group.userAccess.split(' ')">{{access}}</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Permissions</td>
                <td>
                    <ul>
                        <li ng-repeat="permission in userData.group.permissions">{{permission}}</li>
                    </ul>
                </td>
            </tr>
        </table>

    </div>
</div>

\public\otherChat\app.js
/**
 * Created by Sonicdeadlock on 3/1/2016.
 */
'use strict';

var app = angular.module('userApp', [
    'ngResource',
    'ngSanitize',
    'btford.socket-io',
    "luegg.directives"
]);

app.run(['$rootScope','$http', function ($rootScope,$http) {
    $http.get('/auth/self').success(function(data){
        $rootScope.logged_in_user = data;
    });
    $rootScope.hasPermission = function(perm){
        var user = $rootScope.logged_in_user;
        if(!user || !user.group || !user.group.permissions) return false;
        var permissions = user.group.permissions;
        if(permissions.indexOf('god')!=-1 || permissions.indexOf('sudo')!=-1) return true;
        if(permissions.indexOf(perm)!=-1) return true;
        return false;
    }
}]);

app.factory('socket', function (socketFactory) {
    return socketFactory({ioSocket: io.connect()});
});


\public\otherChat\displayController.js
/**
 * Created by Sonicdeadlock on 5/25/2016.
 */
angular.module('userApp').controller("displayController",["$rootScope","$scope",'socket','$interval',
    function($rootScope,$scope,socket,$interval){
        $scope.items = [];
        var buffer = [];
        socket.on('chatRoomEntrance',function(username){
            addItem({text:username+" has entered the room"});
        });
        socket.on('chatRoomExit',function(username){
            addItem({text:username+" has left the room"});
        });
        socket.on('chatServerToClient',function(message){
            addItem(message);
        });
        socket.on('chatRooms',function(chatRooms){
            chatRooms.forEach(function(room){
               addItem({text:room.name});
            });
        });

        $rootScope.clearDisplay = function(){
            $scope.items = [];
        };

        socket.on('chatError',function(message){
            addItem({text:message.error,class:"error"})
        });

        function addItem(item){
            buffer.push(item);
        }

        $rootScope.displayText = function(text){
            addItem({text:text});
        };

        $interval(function(){
            var lastItem = _.last($scope.items);
            if( lastItem && !lastItem.finished){
                if(!lastItem.displayText){
                    lastItem.displayText="";
                }
                lastItem.displayText += lastItem.text[lastItem.displayText.length];
                if(lastItem.text.length==lastItem.displayText.length){
                    lastItem.finished= true;
                }
            }else if(_.head(buffer)){
                $scope.items.push(buffer.shift());
            }

        },40)

}]);

\public\otherChat\index.html
<!DOCTYPE html>
<html lang="en" style="height:100%">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <base href="/">
    <title></title>

    <link rel="stylesheet" href="otherChat/style.css">

</head>
<body ng-app="userApp" style="height: 100%">
<!--resources-->

<script src="/bower_components/jquery/dist/jquery.min.js"></script>
<script src="/bower_components/angular/angular.js"></script>
<script src="/bower_components/angular-sanitize/angular-sanitize.min.js"></script>
<script src="/bower_components/angular-resource/angular-resource.js"></script>
<script src="/bower_components/angular-animate/angular-animate.min.js"></script>
<script src="/bower_components/angular-scroll-glue/src/scrollglue.js"></script>
<script src="/bower_components/lodash/lodash.js"></script>
<script src="/bower_components/socket.io-client/socket.io.js"></script>
<script src="/bower_components/angular-socket-io/socket.min.js"></script>
<!--application-->
<script src="otherChat/app.js"></script>
<script src="otherChat/inputController.js"></script>
<script src="otherChat/displayController.js"></script>
<div id="display" ng-controller="displayController" scroll-glue>
    <p ng-repeat="item in items" ng-class="item.class">{{item.username}}<span ng-if="item.username">$</span> {{item.displayText}}</p>
</div>
<div id="input" ng-controller="inputController" ng-keydown="handleKeyPress($event)" tabindex="0">
    <span>[{{logged_in_user.username}}&nbsp{{room.name?room.name:"~"}}]$&nbsp</span>
    <input ng-model="inputText">
</div>
</body>
<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-77555207-1', 'auto');

</script>
</html>

\public\otherChat\inputController.js
/**
 * Created by Sonicdeadlock on 5/25/2016.
 */
angular.module('userApp').controller("inputController",["$rootScope","$scope",'socket',
    function($rootScope,$scope,socket){
        $scope.inputText ='';

        var rooms=[];
        $scope.handleKeyPress = function($event){
            var keyCode = $event.keyCode;
            switch (keyCode){
                case 13:
                    handleEnter();
                    break;
            }
        };
        function handleEnter(){
            if($scope.inputText==='cd ..'){
                $rootScope.displayText(getFormattedInput());
                exitRoom();
            }
            else if(_.startsWith($scope.inputText,'cd ')){
                $rootScope.displayText(getFormattedInput());
                enterRoom();
            }else if($scope.inputText==='clear' || $scope.inputText==='cls'){
                $rootScope.clearDisplay();
            }
            else if(!$scope.room && $scope.inputText==='ls'){
                socket.emit('getRooms',{});
            }
            else if($scope.room)
                sendMessage();
            else
                $rootScope.displayText(getFormattedInput());

            $scope.inputText = '';
        }

        function sendMessage(){
            socket.emit('chatClientToServer',{text:$scope.inputText});
        }
        function enterRoom(){
            var room = _.find(rooms,{name:$scope.inputText.slice(3)});
            if(!room){
                $rootScope.displayText("-bash: cd: "+$scope.inputText.slice(3)+": No such file or directory");
            }
            else
            socket.emit('chatEnterRoom',{room:room});
        }
        function exitRoom(){
            socket.emit('chatLeaveRoom',{});
            socket.emit('getRooms',{});
            $scope.room = undefined;
        }
        socket.on('connect',function(){
            if($scope.room){
                socket.emit('chatEnterRoom',{room:$scope.room});
            }
            $rootScope.displayText(getFormattedInput()+"ls");
        });
        socket.on('chatRooms',function(chatRooms){
            rooms = chatRooms;
        });
        socket.on('chatEnterRoom',function(message){
            $scope.room = message.room;
        });
        function getFormattedInput(){
            return "["+$rootScope.logged_in_user.username +" "+($scope.room?$scope.room.name:"~")+"]$ "+$scope.inputText;
        }
    }]);

\public\otherChat\style.css
#input{
    display: table;
    width:100%
}

#input > *{
    display: table-cell;
}

#input > input{
     width: 100%;
    border:0;
    color:#f1f1f1;
    background-color: black;
    font-size: small;
 }

#input > span{
    width: 1px;
    white-space: nowrap;
}



p{
    margin:0;
}

p.danger{
    color:darkred;
}

#display{
    max-height: 95%;
    overflow: auto;
}

::-webkit-scrollbar ,::-webkit-scrollbar-thumb{
    display: none;
}

body{
    color:#f1f1f1;
    background-color: black;
    font-size: small;
}

\public\text\app.js
/**
 * Created by Sonicdeadlock on 3/1/2016.
 */
'use strict';

var app = angular.module('userApp', [
    'ngResource',
    'ui.router',
    'controllers',
    'services',
    'directives',
    'ngSanitize'

]);

app.run(['$rootScope', '$state', '$stateParams','$http','$window','$location', function ($rootScope, $state, $stateParams,$http,$window,$location) {
    $rootScope.$on("$stateChangeError", console.log.bind(console));

    //Save a copy of the parameters so we can access them from all the controllers
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $rootScope
        .$on('$stateChangeSuccess',
            function(event){

                if (!$window.ga)
                    return;

                $window.ga('send', 'pageview', { page: $location.path() });
            });

}]);
app.config(['$stateProvider','$urlRouterProvider',function($stateProvider,$urlRouterProvider){
    $urlRouterProvider.otherwise('/');

    $stateProvider
        .state('home',{
            url:'/',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/home/homeView.html",
                    controller:"homeController"
                }
            }
        }).
        state('remove_character',{
        url:'/remove_character',
        views:{
            navbar:{
                templateUrl:"components/navbar/navbarView.html",
                controller:'navbarController'
            },
            content:{
                templateUrl:"components/remove_character/remove_characterView.html",
                controller:"remove_characterController"
            }
        }
    }).
        state('replace_character',{
        url:'/replace_character',
        views:{
            navbar:{
                templateUrl:"components/navbar/navbarView.html",
                controller:'navbarController'
            },
            content:{
                templateUrl:"components/replace_character/replace_characterView.html",
                controller:"replace_characterController"
            }
        }
    });
}]);

angular.module('controllers',['ngAnimate','mgcrea.ngStrap','ngCookies']);
angular.module('directives',['ngAnimate','mgcrea.ngStrap']);
angular.module('services',[]);

\public\text\index.html
<!DOCTYPE html>
<html lang="en" style="height:100%">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title></title>

    <link rel="stylesheet" href="/bower_components/bootstrap-css/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bower_components/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="/bower_components/angular-motion/dist/angular-motion.min.css">
    <link rel="stylesheet" href="/bower_components/bootstrap-additions/dist/bootstrap-additions.min.css">

    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,600,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Karla:400,700' rel='stylesheet' type='text/css'>
</head>
<body ng-app="userApp" style="height: 100%">
<!--resources-->

<script src="/bower_components/jquery/dist/jquery.min.js"></script>
<script src="/bower_components/angular/angular.js"></script>
<script src="/bower_components/angular-sanitize/angular-sanitize.min.js"></script>
<script src="/bower_components/angular-resource/angular-resource.js"></script>
<script src="/bower_components/angular-ui-router/release/angular-ui-router.js"></script>
<script src="/bower_components/bootstrap-css/js/bootstrap.min.js"></script>
<script src="/bower_components/angular-animate/angular-animate.min.js"></script>
<script src="/bower_components/angular-strap/dist/angular-strap.min.js"></script>
<script src="/bower_components/angular-strap/dist/angular-strap.tpl.min.js"></script>
<script src="/bower_components/angular-scroll-glue/src/scrollglue.js"></script>
<script src="/bower_components/lodash/lodash.js"></script>
<script src="/bower_components/angular-cookies/angular-cookies.js"></script>

<!--application-->
<script src="app.js"></script>
<script src="components/navbar/navbarController.js"></script>
<script src="components/home/homeController.js"></script>
<script src="components/remove_character/remove_characterController.js"></script>
<script src="components/replace_character/replace_characterController.js"></script>

<div ui-view="navbar" class="row"></div>
<div ui-view="content" class="row"></div>
</body>
<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-77555207-1', 'auto');

</script>
</html>

\public\text\components\home\homeController.js
/**
 * Created by alexthomas on 1/19/16.
 */
angular.module('controllers').controller('homeController',function($scope,$http,$state){

});

\public\text\components\home\homeView.html
<div class="col-md-10 col-md-offset-1">
    <div class="jumbotron"><h1></h1></div>
</div>

\public\text\components\navbar\navbarController.js
/**
 * Created by alexthomas on 1/19/16.
 */
angular.module('controllers').controller('navbarController',function($scope,$http,$rootScope){

});


\public\text\components\navbar\navbarView.html
<nav class="navbar navbar-inverse">
    <div class="navbar-header">
        <button class="navbar-toggle collapsed" data-target="#user-navbar-collapse-1" data-toggle="collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>

    </div>
    <div class="collapse navbar-collapse" id="user-navbar-collapse-1">
        <div class="container-fluid">
            <ul class="nav navbar-nav">
                <li ><a class="navbar-brand" ui-sref="home">Home</a></li>
                <li><a ui-sref="remove_character">Remove</a></li>
                <li><a ui-sref="replace_character">Replace</a></li>
            </ul>
        </div>
    </div>
</nav>

\public\text\components\remove_character\remove_characterController.js
/**
 * Created by alexthomas on 1/19/16.
 */
angular.module('controllers').controller('remove_characterController',function($scope,$http,$state){
    $scope.evaluate = function(){
        $http.post('/api/textEngine/remove',{text:$scope.text,remove:$scope.remove}).success(function(data){
            $scope.output = data;
        })
    }
});

\public\text\components\remove_character\remove_characterView.html
<div class="col-md-10 col-md-offset-1">
    <div class="form-group">
        <input class="form-control" placeholder="Remove text" ng-model="remove">
    </div>
    <div>
        <div class="col-md-6">
            <textarea ng-model="text"></textarea>
        </div>
        <div class="col-md-6">
            <textarea ng-bind="output"></textarea>
        </div>
    </div>
    <button class="btn btn-primary" ng-click="evaluate()">Evaluate</button>
</div>

\public\text\components\replace_character\replace_characterController.js
/**
 * Created by alexthomas on 1/19/16.
 */
angular.module('controllers').controller('replace_characterController',function($scope,$http,$state){
    $scope.evaluate = function(){
        $http.post('/api/textEngine/leet',{text:$scope.text,chance:100}).success(function(data){
            $scope.output = data;
        })
    }
});

\public\text\components\replace_character\replace_characterView.html
<div class="col-md-10 col-md-offset-1">
    <div>
        <div class="col-md-6">
            <textarea ng-model="text"></textarea>
        </div>
        <div class="col-md-6">
            <textarea ng-bind="output"></textarea>
        </div>
    </div>
    <button class="btn btn-primary" ng-click="evaluate()">Evaluate</button>
</div>

\public\user\app.js
/**
 * Created by Sonicdeadlock on 7/21/2015.
 */
'use strict';

var app = angular.module('userApp', [
    'ngResource',
    'ui.router',
    'controllers',
    'services',
    'directives',
    'ngSanitize'
]);
app.run(['$rootScope', '$state', '$stateParams','$http','$window','$location', function ($rootScope, $state, $stateParams,$http,$window,$location) {
    $rootScope.$on("$stateChangeError", console.log.bind(console));

    //Save a copy of the parameters so we can access them from all the controllers
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $http.get('/auth/self').success(function(data){
        $rootScope.logged_in_user = data;


    });
    $rootScope
        .$on('$stateChangeSuccess',
            function(event){

                if (!$window.ga)
                    return;

                $window.ga('send', 'pageview', { page: $location.path() });
            });
    $rootScope.hasPermission = function(perm){
        var user = $rootScope.logged_in_user;
        if(!user || !user.group || !user.group.permissions) return false;
        var permissions = user.group.permissions;
        if(permissions.indexOf('god')!=-1 || permissions.indexOf('sudo')!=-1) return true;
        if(permissions.indexOf(perm)!=-1) return true;
        return false;
    }
}]);
app.config(['$stateProvider','$urlRouterProvider',function($stateProvider,$urlRouterProvider){
   $urlRouterProvider.otherwise('/');

    $stateProvider
        .state('home',{
            url:'/',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/home/homeView.html",
                    controller:"homeController"
                }
            }
        })
        .state('register',{
            url:'/register',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/register/registerView.html",
                    controller:"registerController"
                }
            }
        })
        .state('manage',{
            url:'/manage',
            views:{
                navbar:{
                    templateUrl:"components/navbar/navbarView.html",
                    controller:"navbarController"
                },
                content:{
                    templateUrl:"components/manage/manageView.html",
                    controller:"manageController"
                }
            }
        })
}]);
app.factory('socket', function () {
    return _.noop;
});
angular.module('controllers',['ngAnimate','mgcrea.ngStrap']);
angular.module('directives',['ngAnimate','mgcrea.ngStrap']);
angular.module('services',[]);

\public\user\index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title></title>

    <link rel="stylesheet" href="/bower_components/bootstrap-css/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bower_components/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="/bower_components/angular-motion/dist/angular-motion.min.css">

    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,600,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Karla:400,700' rel='stylesheet' type='text/css'>
</head>
<body ng-app="userApp">
    <!--resources-->
    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
    <script src="/bower_components/angular/angular.js"></script>
    <script src="/bower_components/angular-sanitize/angular-sanitize.min.js"></script>
    <script src="/bower_components/angular-resource/angular-resource.js"></script>
    <script src="/bower_components/angular-ui-router/release/angular-ui-router.js"></script>
    <script src="/bower_components/bootstrap-css/js/bootstrap.min.js"></script>
    <script src="/bower_components/angular-animate/angular-animate.min.js"></script>
    <script src="/bower_components/angular-strap/dist/angular-strap.min.js"></script>
    <script src="/bower_components/angular-strap/dist/angular-strap.tpl.min.js"></script>
    <script src="/bower_components/lodash/dist/lodash.min.js"></script>

    <!--custom css-->
    <link href="/style.css" rel="stylesheet" type="text/css">
    <!--application-->
    <script src="app.js"></script>
    <script src="components/home/homeController.js"></script>
    <script src="components/navbar/navbarController.js"></script>
    <script src="components/register/registerController.js"></script>
    <script src="components/login/loginController.js"></script>
    <script src="components/manage/manageController.js"></script>

    <div ui-view="navbar"></div>
    <div ui-view="content"></div>
</body>
<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-77555207-1', 'auto');

</script>
</html>

\public\user\components\home\homeController.js
/**
 * Created by alexthomas on 7/21/15.
 */
angular.module('controllers').controller('homeController',function(){});

\public\user\components\home\homeView.html
<div class="jumbotron">
    <h1>Wow, Look at all this awesome content xD</h1>
</div>

\public\user\components\login\loginController.js
angular.module('controllers').controller('loginController',function($scope,$http,$state,$alert,$rootScope,socket){
    var errors = [];
    $scope.login = function(){
        $http.post('/auth/login',{username:$scope.username,password:$scope.password}).success(function(data){
            $rootScope.logged_in_user = data;
            $scope.error=undefined;
            if(socket && socket.connect && socket.disconnect){
                socket.disconnect();
                setTimeout(socket.connect,300);
            }


        })
            .error(function(data,status){


                if(data) {
                       $scope.error = data.message;
                }
                else if(status == 500)  $scope.error='Internal Server Error';
                else   $scope.error='Unknown Error';
            })
    }
});

angular.module('directives').directive('login',function(){
    return {
        templateUrl:"components/login/loginDirective.html",
        controller:'loginController',
        restrict:'E'
    }
});


\public\user\components\login\loginDirective.html
<div class="popover" ng-controller="loginController">
    <div class="popover-title">
        <p>Login</p>
    </div>
    <div class="popover-content">
        <b class="text-danger">{{error}}</b>
        <form class="">
            <div class="input-group margin-bottom-sm">
                <span class="input-group-addon"><i class="fa fa-user fa-fw"></i></span>
                <input class="form-control" type="text" placeholder="Username" ng-model="username">
            </div>
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-key fa-fw"></i></span>
                <input class="form-control" type="password" placeholder="Password" ng-model="password">
            </div>
            <button class="btn btn-primary form-control" ng-click="login()">Login</button>

        </form>
    </div>
</div>

\public\user\components\manage\manageController.js
/**
 * Created by alexthomas on 7/21/15.
 */
angular.module('controllers').controller('manageController',function($scope,$http,$state,$rootScope){
    function updateUsers(){
        $http.get('/auth').success(function(data){
            $scope.users = data;
        });
    }
    function updateGroups(){
        $http.get('/api/permissionGroups').success(function(data){
            $scope.groups = data;
        })
    }

    $scope.newGroup = function(){
        $scope.selectedGroup={
            permissions:[]
        };
    };

    updateGroups();
    updateUsers();
    $scope.newGroup();
    $scope.activePanel = 'user';
    $scope.user = {};
    $scope.edit=false;
    $scope.changed = false;
    $scope.toggleShowInput = function(input){$scope['show_'+input+'_input'] = !$scope['show_'+input+'_input']};
    $scope.toggleEdit = function(){$scope.edit=!$scope.edit;};
    $scope.submit = function(){
        $scope.user._id = $rootScope.logged_in_user._id;
        $http.put('/auth',$scope.user).
        success(function(){
                $scope.edit=false;
        }).
        error(function(data,status){
                console.log(data);
            });
    };
    $scope.checkUsername = function(){
        $scope.checkingUsername = true;
        $http.post('/api/users/getUser',{username:$scope.user.username})
            .success(function(data){
                $scope.checkingUsername = false;
                $scope.usernameTaken = data !=null;
            })
    };
    $scope.selectGroup = function(group){
      $scope.selectedGroup = group;
    };
    $scope.selectUser = function(user){
      $scope.selectedUser = user;
    };
    $scope.submitGroup = function(){
        var group = $scope.selectedGroup;
        if(group._id){
            $http.put('/api/permissionGroups',group).success(function(data){updateGroups();});
        }else{
            $http.post('/api/permissionGroups',group).success(function(data){updateGroups();});
        }
    };
    $scope.deleteGroup = function(){
        var group = $scope.selectedGroup;
        if(group._id){
            $http.delete('/api/permissionGroups/'+group._id).success(function(data){updateGroups();$scope.newGroup();});
        }
    };
    $scope.saveUser =function(){
        var user = $scope.selectedUser;
        $http.put('/api/users',user).
            success(function(){
                updateUsers();
            })
    }
}).directive('focusMe', function($timeout) {
        return {
            link: function(scope, element, attrs) {
                scope.$watch(attrs.focusMe, function(value) {
                    if(value === true) {
                        console.log('value=',value);
                        $timeout(function() {
                        element[0].focus();
                        });
                    }
                });
            }
        };
    });

\public\user\components\manage\manageView.html
<head>
    <!--custom css-->
    <link href="components/manage/style.css" rel="stylesheet">
</head>
<div class="container">
    <div bs-active-pane="activePanel" bs-tabs>
        <div name="user" title="User" bs-pane>
            <div ng-hide="logged_in_user">
                <h1>Please Login to see your profile</h1>
            </div>
            <br>
            <div ng-hide="edit || !logged_in_user" class=" col-md-4 col-lg-3 col-sm-12">
                <a ng-click="toggleEdit()" class="pull-right">Edit</a>
                <p><b>Username: </b>{{logged_in_user.username}}</p>
                <p><b>First Name: </b>{{logged_in_user.firstName}}</p>
                <p><b>Last Name: </b>{{logged_in_user.lastName}}</p>
                <p><b>Email: </b>{{logged_in_user.email}}</p>
            </div>
            <form class="row" ng-show="edit">
                <div class="form-group">
                    <label>
                        First Name<span class="text-danger">*</span>
                    </label>
                    <input class="form-control" type="text" ng-model="user.firstName">
                    <label>
                        Last Name<span class="text-danger">*</span>
                    </label>
                    <input class="form-control" type="text" ng-model="user.lastName">
                    <label>
                        Username<span class="text-danger">*</span>
                        <span data-animation="am-flip-x" class="fa fa-question-circle" bs-tooltip data-placement="right" data-title="Usernames are case sensitive"
                              data-trigger="hover"></span>
                        <span class="text-success fa fa-check" ng-show="!checkingUsername && usernameTaken==false"></span>
                        <span class="text-success" ng-show="checkingUsername"><span class="fa fa-circle-o-notch fa-spin"></span></span>
                        <span class="text-danger" ng-show="usernameTaken"> Username Taken</span>
                    </label>
                    <input class="form-control" type="text" ng-model="user.username" ng-change="checkUsername()">
                    <label>
                        Email<span class="text-danger">*</span>
                    </label>
                    <input class="form-control" type="email" ng-model="user.email">
                    <label>
                        Password<span class="text-danger">*</span>
                    </label>
                    <input class="form-control" type="password" ng-model="user.password">
                    <label>
                        Retype Password<span class="text-danger">*</span><span class="text-danger" ng-hide="user.password==user.passwordAgain"> Passwords do not match</span>
                    </label>
                    <input class="form-control" type="password" ng-model="user.passwordAgain">
                </div>
                <button class="btn btn-primary form-control" ng-click="submit();">Submit</button>
            </form>
        </div>
        <div ng-if="hasPermission('Group Admin')" name="groups" title="Permission Groups" bs-pane class="row no-gutter">
            <h3>Select Group <a class="fa fa-plus-square" ng-click="newGroup()"></a></h3>
            <div id="groups" class="col-md-4">
                <div ng-repeat="group in groups" ng-click="selectGroup(group)" ng-class="{selected:group==selectedGroup}">
                    <b>{{group.name}}</b>
                </div>
            </div>
            <br class="visible-xs-block visible-sm-block">
            <div class="col-md-6 col-sm-12 col-xs-12 pull-right">
                <form class="">
                    <label>Group Name</label>
                    <input ng-model="selectedGroup.name" class="form-control" placeholder="Name">
                    <label>User Access <span class="fa fa-question-circle" bs-popover title="User Access" data-content="What the user will be allowed to see from other users '' will allow everything to be seen and is not reccomened 'username' is reccomened     "
                            data-animation="am-flip-x"  data-trigger="hover"></span></label>
                    <input ng-model="selectedGroup.userAccess" class="form-control" placeholder="User Access">
                    <label>Permissions <a class="fa fa-plus-square" ng-click="selectedGroup.permissions.push('')"></a></label>
                    <div class="input-group" ng-repeat="permission in selectedGroup.permissions track by $index">
                        <input class="form-control" ng-model="selectedGroup.permissions[$index]">
                        <div class="input-group-btn">
                            <button class="btn btn-danger" ng-click="selectedGroup.permissions.splice($index,1)"><span class="fa fa-trash"></span></button>
                        </div>

                    </div>
                    <div class="divider"></div>
                    <br>
                    <button type="button" class="btn btn-default pull-right" ng-model="selectedGroup.default" bs-checkbox>Default</button>
                    <br>
                    <button class="btn btn-primary" ng-click="submitGroup()">Save</button>
                    <button class="btn btn-danger" ng-click="deleteGroup()" ng-show="selectedGroup._id">Delete</button>
                </form>
            </div>
        </div>
        <div ng-if="hasPermission('User Admin')" name="users" title="Users" bs-pane class="row no-gutter">

            <h3>Users</h3>
            <div id="users" class="col-md-4 col-lg-3 col-sm-12">
                <div ng-repeat="user in users" ng-click="selectUser(user)" ng-class="{selected:user==selectedUser}">
                    <b>{{user.username}}</b>
                </div>
            </div>
            <br class="visible-xs-block visible-sm-block">
            <div ng-show="selectedUser" class="col-md-6 col-sm-12 col-xs-12 pull-right">
                <div class="">
                    <p ng-hide="show_username_input"><b>Username: </b>{{selectedUser.username}} <a ng-if="userHasPermission('Edit Users')" ng-click="toggleShowInput('username')">Edit</a></p>
                    <input ng-if="userHasPermission('Edit Users')" ng-show="show_username_input" focus-me="show_username_input" ng-model="selectedUser.username" ng-blur="toggleShowInput('username')" ng-change="$parent.changed=true">
                    <p ng-hide="show_firstName_input"><b>First Name: </b>{{selectedUser.firstName}} <a ng-if="userHasPermission('Edit Users')" ng-click="toggleShowInput('firstName')">Edit</a></p>
                    <input ng-if="userHasPermission('Edit Users')" ng-show="show_firstName_input" focus-me="show_firstName_input" ng-model="selectedUser.firstName" ng-blur="toggleShowInput('firstName')" ng-change="$parent.changed=true">
                    <p ng-hide="show_lastName_input"><b>Last Name: </b>{{selectedUser.lastName}} <a ng-if="userHasPermission('Edit Users')" ng-click="toggleShowInput('lastName')">Edit</a></p>
                    <input ng-if="userHasPermission('Edit Users')" ng-show="show_lastName_input" focus-me="show_lastName_input" ng-model="selectedUser.lastName" ng-blur="toggleShowInput('lastName')" ng-change="$parent.changed=true">
                    <p ng-hide="show_email_input"><b>Email: </b>{{selectedUser.email}} <a ng-if="userHasPermission('Edit Users')" ng-click="toggleShowInput('email')">Edit</a></p>
                    <input ng-if="userHasPermission('Edit Users')" ng-show="show_email_input" focus-me="show_email_input" ng-model="selectedUser.email" ng-blur="toggleShowInput('email')" ng-change="$parent.changed=true">
                    <p ng-hide="show_password_input" ng-if="userHasPermission('Super User Edit')"><b>Password: </b> <a ng-click="toggleShowInput('password')">Edit</a></p>
                    <input ng-if="userHasPermission('Super User Edit')" ng-show="show_password_input" focus-me="show_password_input" ng-model="selectedUser.password" ng-blur="toggleShowInput('password')" ng-change="$parent.changed=true">


                    <button type="button" class="btn btn-default" ng-model="selectedUser.group._id" data-html="false" bs-options="group._id as group.name for group in groups" data-animation="am-flip-x" bs-select ng-change="changed=true">
                        Action <span class="caret"></span>
                    </button>
                    <br>
                    <br>
                    <button class="btn btn-primary" ng-click="saveUser()" ng-show="changed">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

\public\user\components\manage\style.css
.ng-invalid.ng-touched{
    border-color:#ac2925;
}

#groups,#users{
    max-height:400px;
    overflow:auto;
    border: 1px solid #e3e3e3;
}

#groups .selected,#users .selected{
    border: 1px solid #e3e3e3;
    background-color: #EAEAEA;
    padding: 9px
}

#groups *,#users *{
    padding:10px;
}

\public\user\components\navbar\navbarController.js
/**
 * Created by alexthomas on 7/21/15.
 */
angular.module('controllers').controller('navbarController',function($scope,$http,$rootScope){
    $scope.logout = function(){
        $http.get('/api/users/logout').success(function(){
            $rootScope.logged_in_user = undefined;
        })
    }
});

\public\user\components\navbar\navbarView.html
<nav class="navbar navbar-inverse">
    <div class="navbar-header">
        <button class="navbar-toggle collapsed" data-target="#user-navbar-collapse-1" data-toggle="collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>

    </div>
    <div class="collapse navbar-collapse" id="user-navbar-collapse-1">
        <ul class="nav navbar-nav">
            <li><a href="/">Home</a></li>
            <li><a ui-sref="register">Register</a></li>
            <li><a ui-sref="manage">Manage</a></li>
        </ul>
        <ul class="nav navbar-nav navbar-right">
            <li class="" ng-if="!logged_in_user"><a title="Login" data-template-url="components/login/loginDirective.html"   data-placement="bottom" data-animation="am-flip-x" data-container='body' bs-popover>Login</a></li>
            <li ng-if="!logged_in_user"><a href="#/register?next={{$state.$current.url.source}}">Register</a></li>
            <li class="" ng-if="logged_in_user"><a ng-click="logout()">Logout</a></li>
            <li class="" ng-if="logged_in_user"><a>Welcome {{logged_in_user.firstName}}</a></li>
        </ul>
    </div>
</nav>

\public\user\components\register\registerController.js
/**
 * Created by alexthomas on 7/21/15.
 */
angular.module('controllers').controller('registerController',function($scope,$http,$state,$stateParams){
    $scope.register = {};
    $scope.submit = function(){
        $http.post('/auth/register',$scope.register).
        success(function(){//redirect
            if($stateParams.next)
                window.location = $stateParams.next;
            else
                window.location ="/";
        }).
        error(function(data,status){
                console.log(data);
            });
    };
    $scope.checkUsername = function(){
        $scope.checkingUsername = true;
        $http.post('/api/users/getUser',{username:$scope.register.username})
            .success(function(data){
                $scope.checkingUsername = false;
                $scope.usernameTaken = data !=null;
            })
    }
});

\public\user\components\register\registerView.html
<head>
    <!--custom css-->
    <link href="components/register/style.css" rel="stylesheet">
</head>
<div class="container">
    <form class="">
        <div class="form-group">
            <label>
                First Name<span class="text-danger">*</span>
            </label>
            <input class="form-control" type="text" required ng-model="register.firstName">
            <label>
                Last Name<span class="text-danger">*</span>
            </label>
            <input class="form-control" type="text" required ng-model="register.lastName">
            <label>
                Username<span class="text-danger">*</span>
                <span data-animation="am-flip-x" class="fa fa-question-circle" bs-tooltip data-placement="right" data-title="Usernames are case sensitive"
                        data-trigger="hover"></span>
                <span class="text-success fa fa-check" ng-show="!checkingUsername && usernameTaken==false"></span>
                <span class="text-success" ng-show="checkingUsername"><span class="fa fa-circle-o-notch fa-spin"></span></span>
                <span class="text-danger" ng-show="usernameTaken"> Username Taken</span>
            </label>
            <input class="form-control" type="text" required ng-model="register.username" ng-change="checkUsername()">
            <label>
                Email<span class="text-danger">*</span>
            </label>
            <input class="form-control" type="email" required ng-model="register.email">
            <label>
                Password<span class="text-danger">*</span>
            </label>
            <input class="form-control" type="password" required ng-model="register.password">
            <label>
                Retype Password<span class="text-danger">*</span><span class="text-danger" ng-hide="register.password==register.passwordAgain"> Passwords do not match</span>
            </label>
            <input class="form-control" type="password" required ng-model="register.passwordAgain">
        </div>
        <button class="btn btn-primary form-control" ng-click="submit();s">Submit</button>
    </form>
</div>

\public\user\components\register\style.css
.ng-invalid.ng-touched{
    border-color:#ac2925;
}

\routes\api.js
var config = require('../config.js');
var express = require('express');
var router = express.Router();

//apis
var users = require('./api/users');
var permissionGroups = require('./api/permissionGroups');
var messages = require('./api/messages');
var textEngine = require('./api/textEngine');
var hangman = require('./api/hangman');
var rooms = require('./api/rooms');
var update_notes = require('./api/update_notes');
var forum = require('./api/forum');


//route apis
router.use('/users',users);
router.use('/permissionGroups',permissionGroups);
router.use('/messages',messages);
router.use('/textEngine',textEngine);
router.use('/hangman',hangman);
router.use('/rooms',rooms);
router.use('/update_notes',update_notes);
router.use('/forum',forum);

module.exports = router;

\routes\auth.js
/**
 * Created by alexthomas on 1/20/16.
 */
var express = require('express');
var router = express.Router();
var userController = require('../controllers/userController');

router.route('/')
    .post(userController.create)
    .put(userController.requiresLogin,userController.updateSelf)
    .get(userController.get);

router.route('/register')
    .post(userController.create);

router.route('/login')
    .post(userController.login);

router.route('/logout')
    .get(userController.logout)
    .post(userController.logout);

router.route('/self')
    .get(userController.self);

module.exports = router;

\routes\index.js
var config = require('../config.js');
var express = require('express');
var router = express.Router();
var path = require('path');


router.use(express.static(__dirname +'/..'+ config.web.publicPath));
router.use('/',express.static(path.join(__dirname,'/..', config.web.publicPath+'/index')));
router.get('/', function(req, res) {
    //Entry point for Angular
    res.sendFile(config.web.entryPointFile, {
        //express.static middleware is separate from res.sendFile, so we still need to specify the root path here too
        root: path.join(__dirname,'/..', config.web.publicPath+'/index')
    });
});

module.exports = router;

\routes\api\forum.js
/**
 * Created by Sonicdeadlock on 5/5/2016.
 */
var express = require('express');
var router = express.Router();
var db = require('../../db');
var post = require('./forum/post');
var thread = require('./forum/thread');
var topic = require('./forum/topic');
var search = require('./forum/search');

router.use('/posts',post);
router.use('/threads',thread);
router.use('/topics',topic);
router.use('/search',search);

module.exports = router;

\routes\api\hangman.js
/**
 * Created by alexthomas on 4/14/16.
 */
var express = require('express');
var router = express.Router();
var db = require('../../db');
var tokenModel = require('../../models/token');
var token = db.model('token');
var hangmanBot = require('../../bots/hangmanBot');

router.route('/set')
.post(function(req,res){
   var userToken = req.body.token;
    var word = req.body.word;
    if(!userToken){
        res.status(403).send('Invalid token!');
    }else if(!word){
        res.status(403).send('Invalid Word!');
    }
    else{
        token.findOne({token:userToken}).then(function(token){
            if(!token || !token.tokenData.room){
                res.status(403).send('Invalid Token!');
            }
            else if(token.tokenData.userId.id != req.user._id.id){
                res.status(403).send('Invalid user!');
            }
            else{
                hangmanBot.setWord(token.tokenData.room,word);
                token.remove().then(function(){
                    res.send('Success');
                });
            }
        })
    }
});

module.exports = router;

\routes\api\messages.js
/**
 * Created by alexthomas on 1/2/16.
 */
var express = require('express');
var router = express.Router();
var db = require('../../db');
var userController = require('../../controllers/userController');
var messageModel = require('../../models/message');
var message = db.model('message');
var messageController = require('../../controllers/messageController');

router.route('/')
.post(userController.requiresLogin,messageController.create);

router.route('/mine')
    .get(userController.requiresLogin,messageController.mine);

router.route('/mark')
    .post(userController.requiresLogin,messageController.markRead);

router.route('/:id')
    .get(userController.requiresLogin,messageController.get)
    .delete(userController.requiresLogin,messageController.delete);




module.exports = router;


\routes\api\permissionGroups.js
var express = require('express');
var router = express.Router();
var db = require('../../db');
var config = require('../../config');

var userModel = require('../../models/user');
var user = db.model('user');
var permissionGroupModel = require('../../models/permissionGroup');
var permissionGroup = db.model('permissionGroup');

router.route('/')
    .post(function(req,res){
        if(!(req.user)){
            res.status(403).send('Forbidden. Authentication required!');
        }else if(!user.hasPermission(req.user,'Group Admin')){
            res.status(403).send('Forbidden. Authorization required!');
        }else{
            function save(){
                var g= new permissionGroup(req.body);
                g.save()
                    .then(function(){
                        res.status(200).send();
                    });
            }
            if(req.body.default){
                permissionGroup.findOne({default:true},'default')
                    .then(function(group){
                        group.default = false;
                        group.save();
                        save();
                    });
            }else{
                save();
            }
        }
    })
    .put(function(req,res){
        if(!(req.user)){
            res.status(403).send('Forbidden. Authentication required!');
        }else if(!user.hasPermission(req.user,'Group Admin')){
            res.status(402).send('Forbidden. Authorization required!');
        }else{
            function update(){
                permissionGroup.update({_id:req.body._id},req.body)
                    .then(function(modified){
                        res.status(200).send();
                    });
            }
            if(req.body.default){
                permissionGroup.findOne({default:true},'default')
                    .then(function(group){
                        if(group) {
                            group.default = false;
                            group.save();
                        }
                        update();
                    });
            }else{
                update();
            }
        }
    })
    .get(function(req,res){
        permissionGroup.find({})
            .then(function(groups){
                res.json(groups);
            })
    });
router.route('/:id')
    .get(function(req,res){
        permissionGroup.find({_id:req.params.id}).then(function(group){
            if(group) res.json(group);
            else res.status(404).send("Group not found");
        })
    })
    .delete(function(req,res){
        if(!(req.user)){
            res.status(403).send('Forbidden. Authentication required!');
        }else if(!user.hasPermission(req.user,'Group Admin')){
            res.status(403).send('Forbidden. Authorization required!');
        }else{
            permissionGroup.findByIdAndRemove(req.params.id).then(function(){
                res.status(200).send();
            },function(){
                res.status(500).send();
            });

        }
    });


module.exports = router;



\routes\api\rooms.js
/**
 * Created by alexthomas on 4/17/16.
 */
var express = require('express');
var router = express.Router();
var roomController = require('../../controllers/roomController');

router.route('/')
    .get(roomController.get)
    .post(roomController.create);

router.route('/delete/:id')
    .delete(roomController.remove);

router.route('/addBot')
    .post(roomController.addBot);
router.route('/removeBot')
    .post(roomController.removeBot);
router.route('/removeBan')
    .post(roomController.removeBan);
router.route('/changeDescription')
    .post(roomController.changeDescription);
router.route('/changeName')
    .post(roomController.changeName);
router.route('/changeOptions')
    .post(roomController.changeOptions);
router.route('/changePassword')
    .post(roomController.changePassword);


module.exports = router;

\routes\api\textEngine.js
/**
 * Created by alexthomas on 3/26/16.
 */
var express = require('express');
var router = express.Router();
var db = require('../../db');
var _ = require('lodash');
var textMod = require('../../classes/textMod');


router.route('/remove').post(function(req,res){
    res.send(textMod.remove(req.body.remove,req.body.text));
});

router.route('/leet').post(function(req,res){
    textMod.leet(req.body.chance,req.body.text)
        .then(function(result){
            res.send(result);
        })
});

module.exports = router;

\routes\api\update_notes.js
/**
 * Created by Sonicdeadlock on 4/24/2016.
 */
var express = require('express');
var router = express.Router();
var db = require('../../db');
var _ = require('lodash');
var update_notesModel = require('../../models/update_notes');
var update_notes = db.model('update_notes');
var updateNotesController = require('../../controllers/updateNotesController');

router.route('/')
    .get(updateNotesController.get)
    .post(updateNotesController.create);

router.route('/count')
    .get(updateNotesController.count);

module.exports = router;

\routes\api\users.js
var express = require('express');
var router = express.Router();
var db = require('../../db');
var config = require('../../config');
var crypto = require('crypto');
var _ = require('lodash');

var userModel = require('../../models/user');
var user = db.model('user');
var permissionGroupModel = require('../../models/permissionGroup');
var permissionGroup = db.model('permissionGroup');
var userController = require('../../controllers/userController');






router.route('/getUser')
.post(function(req,res){
  var userAccess = 'username _id';
  if(req.user) {
      if(_.isEmpty(req.user.group.userAccess.trim()))
        userAccess = req.user.group.userAccess;
      else
        userAccess =_.union(userAccess.split(' '),(req.user.group.userAccess||' ').split(' ')).join(' ');
  }

  user.findOne(req.body,userAccess)
  .then(function(obj) {

   res.json(obj);

 });
});

router.route('/')
.get(function(req,res){
 if(req.user && req.user.hasPermission('User Admin')){
   user.find({},req.user.group.userAccess).then(function(results){
     res.json(results);
   })
 } else{
   res.status(403).send('Unauthorized')
 }
});









module.exports = router;

\routes\api\forum\post.js
/**
 * Created by Sonicdeadlock on 5/5/2016.
 */
var express = require('express');
var router = express.Router();
var db = require('../../../db');
require('../../../models/forum_post');
var forum_post_model = db.model('forum_post');
require('../../../models/forum_thread');
var forum_thread_model = db.model('forum_thread');
require('../../../models/forum_topic');
var forum_topic_model = db.model('forum_topic');
var forumController = require('../../../controllers/forumController');
var userModel = require('../../../models/user');
var user = db.model('user');
var permissionGroupModel = require('../../../models/permissionGroup');
var permissionGroup = db.model('permissionGroup');
var userController = require('../../../controllers/userController');

router.route('/')
    .post(userController.requiresLogin,forumController.createPost);

router.route('/:postId')
    .get(forumController.getPost)
    .delete(function(req,res){
        forum_post_model.findById(req.params.postId).then(function(result){
            if(!result)
                res.status(404).send('Thread not found');
            else{
                if(!(req.user.hasPermission('Forum Admin')||req.user._id.id ===result.creator.id)){
                    res.status(403).send({
                        message: 'User is not authorized'
                    });
                }else{
                    forum_post_model.findOneAndRemove({_id:req.params.postId})
                        .then(function(){res.status(200).send()},
                            function(err){res.send(400).send()})
                }
            }
        });

    })
    .patch(function(req,res){
        forum_post_model.findByIdAndUpdate(req.params.postId,{$set:{body:req.body.body}})
            .then(function(){res.status(200).send()},
                function(err){res.send(400).send()})
    });

router.route('/:postId/reply')
    .post(userController.requiresLogin,forumController.replyToPost);

module.exports = router;

\routes\api\forum\search.js
/**
 * Created by Sonicdeadlock on 5/9/2016.
 */
var express = require('express');
var router = express.Router();
var db = require('../../../db');
var forumController = require('../../../controllers/forumController');

router.route('/tag/:tag')
    .get(forumController.getByTag);

router.route('/tags')
    .post(forumController.getByTag);

module.exports = router;

\routes\api\forum\thread.js
/**
 * Created by Sonicdeadlock on 5/5/2016.
 */
var express = require('express');
var router = express.Router();
var db = require('../../../db');
require('../../../models/forum_post');
var forum_post_model = db.model('forum_post');
require('../../../models/forum_thread');
var forum_thread_model = db.model('forum_thread');
require('../../../models/forum_topic');
var forum_topic_model = db.model('forum_topic');
var forumController = require('../../../controllers/forumController');
var userModel = require('../../../models/user');
var user = db.model('user');
var permissionGroupModel = require('../../../models/permissionGroup');
var permissionGroup = db.model('permissionGroup');
var userController = require('../../../controllers/userController');

router.route('/')
    .post(userController.requiresLogin,forumController.createThread);

router.route('/:threadId')
    .get(function(req,res){
        var getThreadQuery = forum_thread_model.findById(req.params.threadId);
        getThreadQuery.populate('creator','username group');
        getThreadQuery.populate('history.actor','username');
        var limit = req.query.limit || 15;
        if(limit>100)
        limit = 15;
        getThreadQuery.then(function(result){
            if(result){
               var threadUserPopulateQuery = user.populate(result,{
                    path:'creator.group',
                    select:'name',
                    model:permissionGroup
                });

                var getThreadPostsQuery = forum_post_model.find({thread:req.params.threadId});
                getThreadPostsQuery.sort('-createTime');
                if(req.query.skip)
                    getThreadPostsQuery.skip(req.query.skip);

                getThreadPostsQuery.limit(limit);

                getThreadPostsQuery.populate('creator','username group');

                getThreadPostsQuery = getThreadPostsQuery.then(function(results){
                    if(results==[])
                    return results;
                    return user.populate(results,{
                        path:'creator.group',
                        select:'name',
                        model:permissionGroup
                    });
                }).then(forumController.populatePostReplies);

                Promise.all([threadUserPopulateQuery,getThreadPostsQuery]).then(function(results){
                   var thread = JSON.parse(JSON.stringify(results[0]));
                    thread.posts = results[1];
                    res.json(thread);
                });
            }else res.status(404).send('Thread not found');
        },function(){
            res.status(404).send('Thread not found');
        })
    })
    .delete(userController.requiresLogin,function(req,res){
        var id = req.params.threadId;
        forum_thread_model.findById(req.params.threadId)
            .then(function(result){
                if(!result)
                    res.status(404).send('Thread not found');
                else{
                    if(!(req.user.hasPermission('Forum Admin')||req.user._id.id ==result.creator.id)){
                        res.status(403).send({
                            message: 'User is not authorized'
                        });
                    }else{
                        forum_thread_model.findOneAndRemove({_id:req.params.threadId})
                            .then(function(){res.status(200).send()},
                                function(err){res.send(400).send()})
                    }
                }
            })
    });

router.route('/:threadId/view')
    .patch(function(req,res){
        forum_thread_model.findByIdAndUpdate(req.params.threadId,{$inc:{views:1}})
            .then(function(){res.status(200).send()},
                function(err){res.status(400).send()});
    });

router.route('/:threadId/lock')
    .patch(userController.hasAuthorization(['Forum Admin']),forumController.lockThread);
router.route('/:threadId/unlock')
    .patch(userController.hasAuthorization(['Forum Admin']),forumController.unlockThread);
router.route('/:threadId/pin')
    .patch(userController.hasAuthorization(['Forum Admin']),forumController.pinThread);
router.route('/:threadId/unpin')
    .patch(userController.hasAuthorization(['Forum Admin']),forumController.unpinThread);

module.exports = router;

\routes\api\forum\topic.js
/**
 * Created by Sonicdeadlock on 5/5/2016.
 */
var express = require('express');
var router = express.Router();
var db = require('../../../db');
require('../../../models/forum_post');
var forum_post_model = db.model('forum_post');
require('../../../models/forum_thread');
var forum_thread_model = db.model('forum_thread');
require('../../../models/forum_topic');
var forum_topic_model = db.model('forum_topic');
var forumController = require('../../../controllers/forumController');
var userController = require('../../../controllers/userController');

router.route('/')
    .post(userController.hasAuthorization(['Forum Admin']),forumController.createTopic)
    .get(forumController.getRootTopics);

router.route('/:topicId')
    .get(function(req,res){
       forum_topic_model.findById(req.params.topicId).then(function(result){
           if(result)
           res.json(result);
           else  res.status(404).send('Topic not found');
       },function(){
           res.status(404).send('Topic not found');
       })
    });

router.route('/:topicId/children')
    .get(forumController.getTopicChildren);

module.exports = router;

\test\auth-test.js
/**
 * Created by alexthomas on 5/7/16.
 */
 var should = require('should');
 var assert = require('assert');
 var _ = require('lodash');
 var db = require('../db');
 var config = require('../config');
 var app = require('../server');
 var supertest = require('supertest');
 var Session = require('supertest-session');
 var crypto = require('crypto');


 var userModel = require('../models/user');
 var permissionGroupModel = require('../models/permissionGroup');

 describe('auth api test',function(){
    before(function(next){
        db.once('open',next);
    });
    function * nextUsername(){
        var index=0;
        var baseUsername = 'unused_username';
        while(true){
            yield (baseUsername+index);
            index++;
        }
    }
    var usernameGen = nextUsername();
    function assertUsers(expectation,actual,properties){
        if(!properties){
            properties = ['username','email','firstName','lastName'];
        }
        properties.forEach(function(property){
            expectation[property].should.eql(actual[property]);
        });
    }
    var validUserParts = {
        firstName:['some name','alex','ALEX','ben'],
        lastName:['some name','thomas','THOMAS','jiang'],
        email:['someEmail@gmail.com','other_email@emailProvider.com','additional.email@provider.email','email@email.provider.com'],
        password:['some password','other password','12345678','a1b2c3d4']
    };
    describe('create user',function(){
        describe('create valid users',function(){
            var request;
            var defaultGroup;
            beforeEach(function(){
                request = new Session(app);
            });

            before(function(next){
                permissionGroupModel.findOne({default:true}).then(function(result){
                    defaultGroup = result;
                    next();
                });
            });
            function testCreateUser(userData,callback){
                it('should successfully create a user',function(done){
                    request.post('/auth')
                    .send(userData)
                    .expect(200)
                    .end(function(err,result){
                        if(err){
                            console.log(result.body);
                            done(err);
                        }
                        else{
                            result = result.body;
                            result._id.should.not.be.eql(undefined);
                            userModel.findById(result._id).then(function(result){
                                assertUsers(userData,result);
                                var beforeNow  = (new Date(result.joinDate))<Date.now();
                                beforeNow.should.equal(true);
                                result.group.id.should.equal(defaultGroup._id.id);
                                done();
                                if(callback){
                                    callback();
                                }

                            },function(err){done(err);});
                        }



                    });
                });
            }




            _.forEach(_.keys(validUserParts), function (key) {
                _.forEach(validUserParts[key], function (value) {
                    var user = _.mapValues(validUserParts, _.head);
                    user[key] = value;
                    user.passwordAgain = user.password;
                    user.username = usernameGen.next().value;
                    testCreateUser(user);
                });
            });
            it('should create a user when the group is passed through and still use the default group',function(done){
                var user = _.mapValues(validUserParts, _.head);
                user.passwordAgain = user.password;
                user.username = usernameGen.next().value;
                user.group='572da26fa27ad4ec17028fb9';
                request.post('/auth')
                .send(user)
                .expect(200)
                .end(function(err,result){
                    if(err){
                        console.log(result.body);
                        done(err);
                    }
                    else{
                        result = result.body;
                        result._id.should.not.be.eql(undefined);
                        userModel.findById(result._id).then(function(result){
                            assertUsers(user,result);
                            var beforeNow  = (new Date(result.joinDate))<Date.now();
                            beforeNow.should.equal(true);
                            result.group.id.should.equal(defaultGroup._id.id);
                            done();

                        },function(err){done(err);});
                    }
                });

            });

        });
        describe('fail to create invalid users', function(){
            var request;
            beforeEach(function(){
                request = new Session(app);
            });
            function testCreateUser(userData,details){
                it('should fail to create user with '+details,function(done){
                    request.post('/auth')
                    .send(userData)
                    .expect(400)
                    .end(function(err,result){
                        if(err){
                            done(err);
                        }
                        else{
                            done();
                        }
                    });
                });
            }
            var invalidUserParts = {
                firstName:[undefined],
                lastName:[undefined],
                email:['abc','123','abc123','email@','.com','email@.com','email@com'],
                password:[undefined]
            };
            _.forEach(_.keys(invalidUserParts), function (key) {
                _.forEach(invalidUserParts[key], function (value) {
                    var user = _.mapValues(validUserParts, _.head);
                    user[key] = value;
                    user.passwordAgain = user.password;

                    testCreateUser(user,key+': '+value);
                });
            });
            it('should fail to create a user with an existing username',function(done){
                var user = _.mapValues(validUserParts, _.head);
                user.passwordAgain = user.password;
                user.username = 'root';
                request.post('/auth')
                .send(user)
                .expect(400)
                .end(function(err,result){
                    if(err){
                        console.log(result.body);
                        done(err);
                    }
                    else{
                        done();
                    }
                });
            });

        });
        describe('a newly registered user is logged in',function(){
            var request;
            var user = _.mapValues(validUserParts, _.head);
            user.passwordAgain = user.password;
            user.username = usernameGen.next().value;
            before(function(){
                request = new Session(app);

            });
            it('should be logged in',function(done){
                request.post('/auth').send(user).expect(200).end(function(err){
                    if(err){done(err);}
                    else{
                        request.get('/auth/self')
                        .expect(200)
                        .end(function(err,result){
                            if(err){
                                console.log(result.body);
                                done(err);
                            }
                            else{
                                assertUsers(user,result.body);
                                should.not.exist(result.body.password);
                                should.not.exist(result.body.salt);
                                done();
                            }
                        });
                    }
                });

            });
        });
    });

describe('log a user in',function(){
    describe('successfully',function(){
        var request = new Session(app);
        it('should log a user in',function(done){
            request.post('/auth/login')
            .send({username:'root',password:'root'})
            .expect(200)
            .end(function(err,result){
                if(err){
                    done(err);
                }
                else{
                    var rootUser ={username:'root',firstName:'root',lastName:'root'};
                    assertUsers(rootUser,result.body,['username','firstName','lastName']);
                    done();
                }
            });
        });
        it('should let the user get self',function(done){
            request.get('/auth/self')
            .expect(200)
            .end(function(err,result){
                if(err){
                    done(err);
                }
                else{
                    var rootUser = {username:'root',firstName:'root',lastName:'root'};
                    assertUsers(rootUser,result.body,['username','firstName','lastName']);
                    should.not.exist(result.body.password);
                    should.not.exist(result.body.salt);
                    done();
                }
            });
        });
    });
    describe('bad login',function(){
        var badUsernames = ['somebody','username','password','sudo','admin','12345','1','root1','1root','aroot',
        'roota','Root','rOOt','rOOT','ROOT','!','.',',','@','#','$','%','^','&','*','(,',')','!root','.root',
        ',root','@root','#root','$root','%root','^root','&root','*root','(root',')root','root!','root.','root,',
        'root@','root#','root$','root%','root^','root&','root*','root(','root)','(root)','{root}','[root]'];
        var badPasswords = ['somebody','username','password','sudo','admin','12345','1','root1','1root','aroot',
        'roota','Root','rOOt','rOOT','ROOT','!','.',',','@','#','$','%','^','&','*','(,',')','!root','.root',
        ',root','@root','#root','$root','%root','^root','&root','*root','(root',')root','root!','root.','root,',
        'root@','root#','root$','root%','root^','root&','root*','root(','root)','(root)','{root}','[root]','Password','password1','1password','apassword',
        'passworda','password','password','password','password','!','.',',','@','#','$','%','^','&','*','(,',')','!password','.password',
        ',password','@password','#password','$password','%password','^password','&password','*password','(password',')password','password!','password.','password,',
        'password@','password#','password$','password%','password^','password&','password*','password(','password)','(password)','{password}','[password]'];
            describe('with root password independent',function(){//there is a default user root/root
                var request;
                beforeEach(function(){
                    request = new Session(app);
                });
                badUsernames.forEach(function(username){
                    it('should fail to login with username: '+username+' and password: root',function(done){
                        request.post('/auth/login')
                        .send({username:username,password:'password'})
                        .expect(400)
                        .end(function(err,result){
                           if(err){
                               done(err);
                           }
                           else{
                               result.body.should.eql({message:'Incorrect username.'});
                               done();
                           }
                       });
                    });
                });

            });
            describe('with root password in sequence',function(){//there is a default user root/root
                var request;
                before(function(){
                    request = new Session(app);
                });
                badUsernames.forEach(function(username){
                    it('should fail to login with username: '+username+' and password: root',function(done){
                        request.post('/auth/login')
                        .send({username:username,password:'root'})
                        .expect(400)
                        .end(function(err,result){
                            if(err){
                                done(err);
                            }
                            else{
                                result.body.should.eql({message:'Incorrect username.'});
                                done();
                            }
                        });
                    });
                });

            });

            describe('with root username independent',function(){//there is a default user root/root
                var request;
                beforeEach(function(){
                    request = new Session(app);
                });
                badPasswords.forEach(function(password){
                    it('should fail to login with username: root and password: '+password,function(done){
                        request.post('/auth/login')
                        .send({username:'root',password:password})
                        .expect(400)
                        .end(function(err,result){
                            if(err){
                                done(err);
                            }
                            else{
                                result.body.should.eql({message:'Incorrect password.'});
                                done();
                            }
                        });
                    });
                });

            });
            describe('with root username sequence',function(){//there is a default user root/root
                var request;
                before(function(){
                    request = new Session(app);
                });
                badPasswords.forEach(function(password){
                    it('should fail to login with username: root and password: '+password,function(done){
                        request.post('/auth/login')
                        .send({username:'root',password:password})
                        .expect(400)
                        .end(function(err,result){
                            if(err){
                                done(err);
                            }
                            else{
                                result.body.should.eql({message:'Incorrect password.'});
                                done();
                            }
                        });
                    });
                });

            });
            var request = new Session(app);
            it('should fail without a username',function(done){
                request.post('/auth/login')
                .send({password:'root'})
                .expect(400)
                .end(function(err,result){
                    if(err){
                        done(err);
                    }
                    else{
                        result.body.should.eql({message:'Missing credentials'});
                        done();
                    }
                });
            });
            it('should fail without a password',function(done){
                request.post('/auth/login')
                .send({username:'root'})
                .expect(400)
                .end(function(err,result){
                    if(err){
                        done(err);
                    }
                    else{
                        result.body.should.eql({message:'Missing credentials'});
                        done();
                    }
                });
            });


        });

});

describe('get self while not logged in',function(){
    it('should fail to get self',function(done){
        var request = new Session(app);
        request.get('/auth/self')
        .expect(401)
        .end(function(err){
            if(err){
                done(err);
            }
            else{
                done();
            }
        });
    });
});

describe('log a user out',function(){
    var request;
    beforeEach(function(){
        request = new Session(app);
    });

    it('should log the user out',function(done){
        request.post('/auth/login')
        .send({username:'root',password:'root'})
        .expect(200)
        .end(function(err){
            if(err){
                done(err);
            }
            else{
                request.get('/auth/logout')
                .expect(200)
                .end(function(err){
                    if(err){
                        done(err);
                    }
                    else{
                        done();
                    }
                });
            }
        });
    });
    it('should log the user out',function(done){
        request.get('/auth/logout')
        .expect(200)
        .end(function(err){
            if(err){
                done(err);
            }
            else{
                done();
            }
        });
    });
});

describe('change a user',function(){
    describe('with login',function(){
        var request;
        beforeEach(function(next){
            request = new Session(app);
            var user = _.mapValues(validUserParts, _.head);
            user.passwordAgain = user.password;
            user.username = usernameGen.next().value;
            request.post('/auth')
            .send(user)
            .expect(200)
            .end(function(err){
                if(err){
                    next(err);
                }
                else{
                    next();
                }
            });
        });

        it('should change the user\'s username',function(done){
            request.get('/auth/self')
            .expect(200)
            .end(function(err,result){
                if(err){
                    done(err);
                }
                else
                {
                    var beforeChangeUser = result.body;
                    var userClone = _.cloneDeep(beforeChangeUser);
                    userClone.username = usernameGen.next().value;
                    request.put('/auth')
                    .send(userClone)
                    .end(function(err){
                        if(err){
                            done(err);
                        }
                        else{
                            request.get('/auth/self')
                            .expect(200)
                            .end(function(err,result){
                                if(err){
                                    done(err);
                                }
                                else{
                                    var afterChangeUser = result.body;
                                    assertUsers(userClone,afterChangeUser);
                                    afterChangeUser.username.should.not.equal(beforeChangeUser.username);
                                    done();
                                }
                            });
                        }
                    });
                }

            });
        });

        it('should change the user\'s first name',function(done){
            request.get('/auth/self')
            .expect(200)
            .end(function(err,result){
                if(err){
                    done(err);
                }
                else
                {
                    var beforeChangeUser = result.body;
                    var userClone = _.cloneDeep(beforeChangeUser);
                    userClone.firstName = 'anUnusedName';
                    request.put('/auth')
                    .send(userClone)
                    .end(function(err){
                        if(err){
                            done(err);
                        }
                        else{
                            request.get('/auth/self')
                            .expect(200)
                            .end(function(err,result){
                                if(err){
                                    done(err);
                                }
                                else{
                                    var afterChangeUser = result.body;
                                    assertUsers(userClone,afterChangeUser);
                                    afterChangeUser.firstName.should.not.equal(beforeChangeUser.firstName);
                                    done();
                                }
                            });
                        }
                    });
                }

            });
        });

        it('should change the user\'s last name',function(done){
            request.get('/auth/self')
            .expect(200)
            .end(function(err,result){
                if(err){
                    done(err);
                }
                else
                {
                    var beforeChangeUser = result.body;
                    var userClone = _.cloneDeep(beforeChangeUser);
                    userClone.lastName = 'anUnusedName';
                    request.put('/auth')
                    .send(userClone)
                    .end(function(err){
                        if(err){
                            done(err);
                        }
                        else{
                            request.get('/auth/self')
                            .expect(200)
                            .end(function(err,result){
                                if(err){
                                    done(err);
                                }
                                else{
                                    var afterChangeUser = result.body;
                                    assertUsers(userClone,afterChangeUser);
                                    afterChangeUser.lastName.should.not.equal(beforeChangeUser.lastName);
                                    done();
                                }
                            });
                        }
                    });
                }

            });
        });

        it('should change the user\'s email',function(done){
            request.get('/auth/self')
            .expect(200)
            .end(function(err,result){
                if(err){
                    done(err);
                }
                else
                {
                    var beforeChangeUser = result.body;
                    var userClone = _.cloneDeep(beforeChangeUser);
                    userClone.email = 'anotheremail@gmail.com';
                    request.put('/auth')
                    .send(userClone)
                    .end(function(err){
                        if(err){
                            done(err);
                        }
                        else{
                            request.get('/auth/self')
                            .expect(200)
                            .end(function(err,result){
                                if(err){
                                    done(err);
                                }
                                else{
                                    var afterChangeUser = result.body;
                                    assertUsers(userClone,afterChangeUser);
                                    afterChangeUser.email.should.not.equal(beforeChangeUser.email);
                                    done();
                                }
                            });
                        }
                    });
                }

            });
        });

        it('should change the user\'s password',function(done){
            request.get('/auth/self')
            .expect(200)
            .end(function(err,result){
                if(err){
                    done(err);
                }
                else
                {
                    var beforeChangeUser = result.body;
                    var userClone = _.cloneDeep(beforeChangeUser);
                    userClone.password = 'someOtherPassword';
                    request.put('/auth')
                    .send(userClone)
                    .end(function(err){
                        if(err){
                            done(err);
                        }
                        else{
                            request.get('/auth/self')
                            .expect(200)
                            .end(function(err,result){
                                if(err){
                                    done(err);
                                }
                                else{
                                    var afterChangeUser = result.body;
                                    assertUsers(userClone,afterChangeUser);
                                    userModel.findById(afterChangeUser._id,'password salt').then(function(result){
                                        var password = crypto.pbkdf2Sync(userClone.password, result.salt, config.hash.itterations, config.hash.length).toString('base64');
                                        password.should.equal(result.password);
                                        done();
                                    });
                                }
                            });
                        }
                    });
                }

            });
        });

        it('should fail to change the username to an already existing one',function(done){
            request.get('/auth/self')
            .expect(200)
            .end(function(err,result){
                if(err){
                    done(err);
                }else{
                    var user = result.body;
                    user.username = 'root';
                    request.put('/auth')
                    .send(user)
                    .expect(400)
                    .end(function(err){
                        if(err){
                            done(err);
                        }else{
                            done();
                        }
                    });
                }
            });
        });

        it('should fail to change the email to an invalid one',function(done){
            request.get('/auth/self')
            .expect(200)
            .end(function(err,result){
                if(err){
                    done(err);
                }else{
                    var user = result.body;
                    user.email = 'root';
                    request.put('/auth')
                    .send(user)
                    .expect(400)
                    .end(function(err){
                        if(err){
                            done(err);
                        }else{
                            done();
                        }
                    });
                }
            });
        });
        
        it('should fail to change the user\'s group',function(done){
            request.get('/auth/self')
            .expect(200)
            .end(function(err,result){
                if(err){
                    done(err);
                }
                else
                {
                    var beforeChangeUser = result.body;
                    var userClone = _.cloneDeep(beforeChangeUser);
                    userClone.group = "572d7a3d6f775fb187f549fe";
                    request.put('/auth')
                    .send(userClone)
                    .end(function(err){
                        if(err){
                            done(err);
                        }
                        else{
                            request.get('/auth/self')
                            .expect(200)
                            .end(function(err,result){
                                if(err){
                                    done(err);
                                }
                                else{
                                    var afterChangeUser = result.body;
                                    assertUsers(userClone,afterChangeUser);
                                    userModel.findById(afterChangeUser._id,'group').then(function(result){
                                        result.group.should.not.equal(userClone.group);
                                        done();
                                    });
                                }
                            });
                        }
                    });
                }

            });
        });
    });

    describe('without login',function(){
        var request;
        beforeEach(function(){
            request = new Session(app);
        });


        it('should fail to update it\'s self without being logged in',function(done){
            request.put('/auth')
            .send({})
            .expect(401)
            .end(function(err){
                if(err){
                    done(err);
                }
                else{
                    done();
                }
            });
        });
    });
    


});
});

